#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import websockets
import json

async def test_rag_websocket():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RAG —Å–µ—Ä–≤–∏—Å–æ–º —Ç–æ—á–Ω–æ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç"""
    uri = "ws://127.0.0.1:8000/ws"
    
    try:
        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RAG —Å–µ—Ä–≤–∏—Å—É...")
        async with websockets.connect(uri) as websocket:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –±–æ—Ç
            question = "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç"
            role = "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            specialization = "–ù–µ —É–∫–∞–∑–∞–Ω–∞" 
            question_id = "888"
            context_str = "[]"  # –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
            count = "1"
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
            await websocket.send(question)
            await websocket.send(role)
            await websocket.send(specialization)
            await websocket.send(question_id)
            await websocket.send(context_str)
            await websocket.send(count)
            print(f"   –í–æ–ø—Ä–æ—Å: {question}")
            print(f"   –†–æ–ª—å: {role}")
            print(f"   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}")
            print(f"   ID: {question_id}")
            print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_str}")
            print(f"   –°—á–µ—Ç—á–∏–∫: {count}")
            
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...")
            answer_parts = []
            empty_count = 0
            
            try:
                while empty_count < 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                    try:
                        response = await asyncio.wait_for(websocket.recv(), timeout=10.0)
                        if response:
                            print(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: '{response}'")
                            answer_parts.append(response)
                            empty_count = 0
                        else:
                            empty_count += 1
                            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç #{empty_count}")
                    except asyncio.TimeoutError:
                        print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
                        break
                        
            except websockets.exceptions.ConnectionClosed:
                print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                
            print(f"\nüìã –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —á–∞—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞: {len(answer_parts)}")
            if answer_parts:
                full_answer = "".join(answer_parts)
                print(f"üí¨ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: '{full_answer}'")
            else:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_rag_websocket()) 