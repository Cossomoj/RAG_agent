#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ RAG service –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
"""

import requests
import json
import sys
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:5000"  # URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
TEST_USER_ID = "test_user_123"

def test_api_endpoint(endpoint, data, description):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"–¢–ï–°–¢: {description}")
    print(f"Endpoint: {endpoint}")
    print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False, indent=2)}")
    print('='*60)
    
    try:
        response = requests.post(f"{API_BASE_URL}{endpoint}", json=data, timeout=60)
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£–°–ü–ï–•!")
            print(f"–û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {result.get('answer', '')[:200]}...")
            if result.get('suggested_questions'):
                print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {len(result['suggested_questions'])}")
            return True
        else:
            print("‚ùå –û–®–ò–ë–ö–ê!")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–ê–ô–ú–ê–£–¢! –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        return False
    except Exception as e:
        print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

def test_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        response = requests.get(f"{API_BASE_URL}/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
            return True
        else:
            print("‚ùå –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return False
    except:
        print("‚ùå –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–Ø–ú–û–ì–û –û–ë–†–ê–©–ï–ù–ò–Ø –ö RAG SERVICE")
    print(f"API URL: {API_BASE_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if not test_health():
        print("\n‚ùå –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        sys.exit(1)
    
    success_count = 0
    total_tests = 0
    
    # –¢–µ—Å—Ç 1: –°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ /api/ask
    total_tests += 1
    if test_api_endpoint(
        "/api/ask",
        {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ SDLC?",
            "user_id": TEST_USER_ID,
            "role": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            "specialization": "Python",
            "question_id": 888,
            "vector_store": "auto"
        },
        "–°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ (question_id=888)"
    ):
        success_count += 1
    
    # –¢–µ—Å—Ç 2: –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ /api/ask_library
    total_tests += 1
    if test_api_endpoint(
        "/api/ask_library",
        {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ SDLC",
            "user_id": TEST_USER_ID,
            "role": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            "specialization": "Python",
            "question_id": 23
        },
        "–ë–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (question_id=23)"
    ):
        success_count += 1
    
    # –¢–µ—Å—Ç 3: –í–æ–ø—Ä–æ—Å —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º vector_store
    total_tests += 1
    if test_api_endpoint(
        "/api/ask",
        {
            "question": "–ö–∞–∫–∏–µ –µ—Å—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?",
            "user_id": TEST_USER_ID,
            "role": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            "specialization": "Python",
            "vector_store": "python"
        },
        "–í–æ–ø—Ä–æ—Å —Å —è–≤–Ω—ã–º vector_store=python"
    ):
        success_count += 1
    
    # –¢–µ—Å—Ç 4: –í–æ–ø—Ä–æ—Å –¥–ª—è –¥—Ä—É–≥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    total_tests += 1
    if test_api_endpoint(
        "/api/ask",
        {
            "question": "–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?",
            "user_id": TEST_USER_ID,
            "role": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            "specialization": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
            "vector_store": "qa"
        },
        "–í–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ —Å vector_store=qa"
    ):
        success_count += 1
    
    # –¢–µ—Å—Ç 5: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ –∫–µ—à–∞)
    total_tests += 1
    if test_api_endpoint(
        "/api/ask_library",
        {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ SDLC",
            "user_id": TEST_USER_ID,
            "role": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", 
            "specialization": "Python",
            "question_id": 23
        },
        "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–∏–∑ –∫–µ—à–∞)"
    ):
        success_count += 1
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*60)
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/total_tests*100):.1f}%")
    
    if success_count == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ RAG service —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ó–∞–ø—É—â–µ–Ω –ª–∏ RAG service –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   - –î–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    return success_count == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 