// Telegram Web App API
let tg = window.Telegram.WebApp;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    API_BASE_URL: 'https://restocorp.ru/api', // API —á–µ—Ä–µ–∑ nginx –Ω–∞ –¥–æ–º–µ–Ω–µ
    WEBSOCKET_URL: 'ws://localhost:8000/ws'
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const AppState = {
    currentScreen: 'main-menu',
    user: null,
    profile: {
        role: '',
        specialization: ''
    },
    history: [],
    questions: [],
    allQuestions: [], // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    questionCategories: [], // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    questionFilters: {
        search: '',
        category: ''
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–æ–ª–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
let roles = [];
let specializations = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    console.log('üåê CONFIG:', CONFIG);
    console.log('üì± Telegram WebApp –æ–±—ä–µ–∫—Ç:', window.Telegram?.WebApp);
    
    try {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º viewport fixes...');
        initViewportFixes();
        
        console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp...');
        initTelegramWebApp();
        
        console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
        await loadRolesAndSpecializations();
        
        console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        await loadUserProfile();
        
        console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é...');
        await loadHistory();
        
        console.log('‚ùì –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...');
        await loadQuestions();
        
        console.log('üè† –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
        createMainMenu();
        
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log('üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AppState:', {
            user: AppState.user,
            profile: AppState.profile,
            questionsCount: AppState.questions?.length || 0,
            historyCount: AppState.history?.length || 0
        });
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: error.message,
            stack: error.stack,
            type: error.constructor.name
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        showAlert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
});

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è viewport –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
function initViewportFixes() {
    function setVhProperty() {
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
    }
    
    setVhProperty();
    
    window.addEventListener('resize', debounce(setVhProperty, 100));
    window.addEventListener('orientationchange', () => {
        setTimeout(setVhProperty, 100);
    });
    
    let lastTouchEnd = 0;
    document.addEventListener('touchend', function (event) {
        const now = (new Date()).getTime();
        if (now - lastTouchEnd <= 300) {
            event.preventDefault();
        }
        lastTouchEnd = now;
    }, false);
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
function initTelegramWebApp() {
    try {
        tg.expand();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Telegram UI Kit 6.10+
        if (tg.setHeaderColor) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–º–æ–π
        tg.setHeaderColor('bg_color');
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if (tg.headerColor) {
            document.documentElement.style.setProperty('--tg-header-color', tg.headerColor);
        }
        
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            AppState.user = tg.initDataUnsafe.user;
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', AppState.user);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            saveUserId(AppState.user.id);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            console.warn('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
        
        tg.MainButton.text = '–ì–æ—Ç–æ–≤–æ';
        tg.MainButton.hide();
        
        tg.BackButton.onClick(() => {
            goBack();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–º—ã
        if (tg.onEvent) {
            tg.onEvent('themeChanged', () => {
                console.log('–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏');
                updateThemeColors();
            });
        }
        
        console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ —Ç–µ–º—ã
function updateThemeColors() {
    // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã
    const root = document.documentElement;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if (tg.headerColor) {
        root.style.setProperty('--tg-header-color', tg.headerColor);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    document.body.style.backgroundColor = 'var(--tg-theme-bg-color)';
    document.body.style.color = 'var(--tg-theme-text-color)';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram UI Kit
function initTelegramUI() {
    if (!TelegramUI) {
        console.error('Telegram UI Kit –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    createMainMenu();
    
    console.log('Telegram UI Kit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å Telegram UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
function createMainMenu() {
    const menuGrid = document.getElementById('menu-grid');
    if (!menuGrid) return;

    const menuItems = [
        {
            id: 'ask-question',
            icon: '‚ùì',
            title: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
            description: '–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI-–º–µ–Ω—Ç–æ—Ä–∞'
        },
        {
            id: 'questions-library',
            icon: 'üìö',
            title: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤',
            description: '–ì–æ—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–æ–ª—è–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º'
        },
        {
            id: 'history',
            icon: 'üìú',
            title: '–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤',
            description: '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –±–µ—Å–µ–¥—ã'
        },
        {
            id: 'profile',
            icon: 'üë§',
            title: '–ü—Ä–æ—Ñ–∏–ª—å',
            description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–ª—å –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é'
        },
        {
            id: 'feedback',
            icon: 'üí¨',
            title: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
            description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é'
        }
    ];

    menuGrid.innerHTML = '';

    menuItems.forEach(item => {
        const card = createMenuCard(item);
        menuGrid.appendChild(card);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telegram UI
function createMenuCard(item) {
    const card = document.createElement('div');
    card.className = 'menu-card';
    card.onclick = () => showScreen(item.id);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª–∏ Telegram UI
    card.style.cssText = `
        background: var(--tg-theme-secondary-bg-color, #f0f0f0);
        border-radius: 12px;
        padding: 16px;
        text-align: center;
        min-height: 100px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        border: 1px solid var(--tg-theme-section-separator-color, #e0e0e0);
    `;

    card.innerHTML = `
        <div class="menu-icon">${item.icon}</div>
        <h3 style="color: var(--tg-theme-text-color); font-size: 16px; font-weight: 600; margin-bottom: 4px;">
            ${item.title}
        </h3>
        <p style="color: var(--tg-theme-subtitle-text-color, var(--tg-theme-hint-color)); font-size: 14px; line-height: 1.3;">
            ${item.description}
        </p>
    `;

    return card;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
function createScreenHeader(title, showBackButton = true) {
    const header = document.createElement('div');
    header.style.cssText = `
        display: flex;
        align-items: center;
        justify-content: ${showBackButton ? 'flex-start' : 'center'};
        margin-bottom: 16px;
        padding-bottom: 12px;
        border-bottom: 1px solid var(--tg-theme-section-separator-color, #e0e0e0);
        position: relative;
    `;

    if (showBackButton) {
        const backButton = document.createElement('button');
        backButton.innerHTML = '–ù–∞–∑–∞–¥';
        backButton.style.cssText = `
            background: var(--tg-theme-bg-color);
            border: none;
            border-radius: 12px;
            padding: 8px 16px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--tg-theme-button-color);
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.15s cubic-bezier(0.4, 0.0, 0.2, 1);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
            white-space: nowrap;
        `;
        
        // –°–æ–∑–¥–∞–µ–º ripple —ç—Ñ—Ñ–µ–∫—Ç
        backButton.addEventListener('mousedown', (e) => {
            backButton.style.transform = 'scale(0.92)';
            backButton.style.boxShadow = '0 1px 4px rgba(0, 0, 0, 0.15)';
            
            // Ripple —ç—Ñ—Ñ–µ–∫—Ç
            const ripple = document.createElement('div');
            const rect = backButton.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;
            
            ripple.style.cssText = `
                position: absolute;
                width: ${size}px;
                height: ${size}px;
                left: ${x}px;
                top: ${y}px;
                background: var(--tg-theme-button-color);
                border-radius: 12px;
                opacity: 0.1;
                transform: scale(0);
                animation: ripple 0.6s linear;
                pointer-events: none;
            `;
            
            backButton.appendChild(ripple);
            
            setTimeout(() => {
                if (ripple.parentNode) {
                    ripple.parentNode.removeChild(ripple);
                }
            }, 600);
        });
        
        backButton.addEventListener('mouseup', () => {
            backButton.style.transform = 'scale(1)';
            backButton.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';
        });
        
        backButton.addEventListener('mouseleave', () => {
            backButton.style.transform = 'scale(1)';
            backButton.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';
        });
        
        // Hover —ç—Ñ—Ñ–µ–∫—Ç
        backButton.addEventListener('mouseenter', () => {
            backButton.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
        });
        
        backButton.onclick = () => showScreen('main-menu');
        header.appendChild(backButton);
    }

    const titleElement = document.createElement('h2');
    titleElement.textContent = title;
    titleElement.style.cssText = `
        color: var(--tg-theme-text-color);
        font-size: 20px;
        font-weight: 600;
        margin: 0;
        ${showBackButton ? 'position: absolute; left: 50%; transform: translateX(-50%);' : ''}
    `;
    
    header.appendChild(titleElement);

    return header;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∏–ª–µ Telegram
function createButton(text, mode = 'primary', onClick = null, disabled = false) {
    const button = document.createElement('button');
    button.textContent = text;
    button.disabled = disabled;
    
    const isPrimary = mode === 'primary';
    const isDestructive = mode === 'destructive';
    
    let backgroundColor, textColor, borderColor;
    
    if (isDestructive) {
        backgroundColor = 'transparent';
        textColor = 'var(--tg-theme-destructive-text-color, #ff3b30)';
        borderColor = 'var(--tg-theme-destructive-text-color, #ff3b30)';
    } else if (isPrimary) {
        backgroundColor = 'var(--tg-theme-button-color, #0088cc)';
        textColor = 'var(--tg-theme-button-text-color, #ffffff)';
        borderColor = 'none';
    } else {
        backgroundColor = 'transparent';
        textColor = 'var(--tg-theme-button-color, #0088cc)';
        borderColor = 'var(--tg-theme-button-color, #0088cc)';
    }
    
    button.style.cssText = `
        background: ${backgroundColor};
        color: ${textColor};
        border: ${borderColor === 'none' ? 'none' : `1px solid ${borderColor}`};
        border-radius: 8px;
        padding: 12px 24px;
        font-size: 16px;
        font-weight: 500;
        cursor: ${disabled ? 'not-allowed' : 'pointer'};
        transition: all 0.2s ease;
        min-height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: ${disabled ? '0.6' : '1'};
    `;

    if (onClick && !disabled) {
        button.onclick = onClick;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
    if (!disabled) {
        button.addEventListener('mousedown', () => {
            button.style.transform = 'scale(0.98)';
        });
        
        button.addEventListener('mouseup', () => {
            button.style.transform = 'scale(1)';
        });
        
        button.addEventListener('mouseleave', () => {
            button.style.transform = 'scale(1)';
        });
    }

    return button;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ —Å—Ç–∏–ª–µ Telegram
function createTextarea(placeholder = '', rows = 4) {
    const textarea = document.createElement('textarea');
    textarea.placeholder = placeholder;
    textarea.rows = rows;
    
    textarea.style.cssText = `
        width: 100%;
        background: var(--tg-theme-secondary-bg-color, #f0f0f0);
        border: 1px solid var(--tg-theme-section-separator-color, #e0e0e0);
        border-radius: 8px;
        padding: 12px;
        font-size: 16px;
        color: var(--tg-theme-text-color);
        resize: vertical;
        min-height: 100px;
        font-family: inherit;
        line-height: 1.4;
    `;
    
    // –§–æ–∫—É—Å —Å—Ç–∏–ª–∏
    textarea.addEventListener('focus', () => {
        textarea.style.borderColor = 'var(--tg-theme-button-color, #0088cc)';
        textarea.style.outline = 'none';
    });
    
    textarea.addEventListener('blur', () => {
        textarea.style.borderColor = 'var(--tg-theme-section-separator-color, #e0e0e0)';
    });

    return textarea;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å—Ç–∏–ª–µ Telegram
function createCard(content) {
    const card = document.createElement('div');
    card.style.cssText = `
        background: var(--tg-theme-secondary-bg-color, #f0f0f0);
        border-radius: 12px;
        padding: 16px;
        border: 1px solid var(--tg-theme-section-separator-color, #e0e0e0);
        margin-bottom: 12px;
    `;
    
    if (typeof content === 'string') {
        card.innerHTML = content;
    } else {
        card.appendChild(content);
    }
    
    return card;
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
async function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
        AppState.currentScreen = screenId;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ Telegram
        updateTelegramButtons(screenId);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Ä–∞–Ω–∞
        await loadScreenData(screenId);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ Telegram
function updateTelegramButtons(screenId) {
    if (!tg) return;
    
    if (screenId === 'main-menu') {
        tg.BackButton.hide();
    } else {
        tg.BackButton.show();
    }
}

// –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
function goBack() {
    if (AppState.currentScreen === 'main-menu') {
        if (tg) tg.close();
    } else {
        showScreen('main-menu');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Ä–∞–Ω–∞
async function loadScreenData(screenId) {
    switch (screenId) {
        case 'ask-question':
            createQuestionScreen();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            await loadHistory();
            break;
        case 'questions-library':
            createQuestionsLibraryScreen();
            await loadQuestions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            renderQuestions();
            break;
        case 'history':
            await loadHistory();
            createHistoryScreen();
            renderHistory();
            break;
        case 'profile':
            createProfileScreen();
            renderProfile();
            break;
        case 'feedback':
            createFeedbackScreen();
            initFeedbackScreen();
            break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function loadScreenContent(screenId) {
    return loadScreenData(screenId);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
function createQuestionScreen() {
    const header = document.getElementById('question-header');
    const formContainer = document.getElementById('question-form-container');
    
    if (!header || !formContainer) return;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header.innerHTML = '';
    header.appendChild(createScreenHeader('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'));
    
    // –§–æ—Ä–º–∞
    formContainer.innerHTML = '';
    
    const form = document.createElement('div');
    form.className = 'question-form';
    
    const label = document.createElement('label');
    label.textContent = '–í–∞—à –≤–æ–ø—Ä–æ—Å:';
    label.style.cssText = `
        color: var(--tg-theme-text-color);
        font-weight: 500;
        margin-bottom: 8px;
        display: block;
    `;
    
    const textarea = createTextarea('–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å...');
    textarea.id = 'question-input';
    
    const sendButton = createButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'primary', sendQuestion);
    sendButton.id = 'send-question';
    
    form.appendChild(label);
    form.appendChild(textarea);
    form.appendChild(sendButton);
    
    formContainer.appendChild(form);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryName(category) {
    const names = {
        '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ': '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
        '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏': '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏',
        '–†–∞–∑–≤–∏—Ç–∏–µ': '–†–∞–∑–≤–∏—Ç–∏–µ',
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ',
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏': '–ü—Ä–æ—Ñ –Ω–∞–≤—ã–∫–∏',
        'development': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        'analysis': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
        'management': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        'testing': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
    };
    return names[category] || category;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryIcon(category) {
    const icons = {
        '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ': 'ü§ù',
        '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏': 'üìã',
        '–†–∞–∑–≤–∏—Ç–∏–µ': 'üìà',
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ': 'üí°',
        'development': 'üíª',
        'analysis': 'üìä',
        'management': 'üë•',
        'testing': 'üß™'
    };
    return icons[category] || '‚ùì';
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
function renderQuestions() {
    const questionsList = document.getElementById('questions-list');
    const questions = AppState.questions || [];
    
    if (!questionsList) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (questions.length === 0 && AppState.questions === null) {
        showQuestionsLoadingSkeleton(questionsList);
        return;
    }
    
    questionsList.innerHTML = '';
    
    if (questions.length === 0) {
        const emptyState = document.createElement('div');
        emptyState.className = 'empty-state';
        emptyState.style.cssText = `
            text-align: center;
            padding: 40px 20px;
            color: var(--tg-theme-hint-color);
        `;
        emptyState.innerHTML = `
            <div style="font-size: 48px; margin-bottom: 16px;">üìù</div>
            <h3 style="margin: 0 0 8px 0; font-size: 18px; font-weight: 600; color: var(--tg-theme-text-color);">–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p style="margin: 0; font-size: 14px; line-height: 1.5;">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</p>
        `;
        questionsList.appendChild(emptyState);
        return;
    }
    
    questions.forEach((question, index) => {
        const div = document.createElement('div');
        div.className = 'question-item';
        div.style.cssText = `
            background: var(--tg-theme-secondary-bg-color);
            border: 1px solid var(--tg-theme-section-separator-color);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: transform 0.2s ease;
        `;
        
        const preview = question.preview || question.text.substring(0, 120) + '...';
        
        div.innerHTML = `
            <div class="question-header" style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;">
                <div class="question-meta" style="display: flex; align-items: center;">
                    <div class="question-icon" style="margin-right: 8px; font-size: 20px;">${getCategoryIcon(question.category)}</div>
                    <div class="question-title" style="font-weight: 600; color: var(--tg-theme-text-color); font-size: 16px;">${question.title || '–í–æ–ø—Ä–æ—Å'}</div>
                </div>
                <div class="question-category" style="background: var(--tg-theme-button-color); color: var(--tg-theme-button-text-color); padding: 4px 6px; border-radius: 6px; font-size: 10px; font-weight: 500; white-space: nowrap;">${getCategoryName(question.category)}</div>
            </div>
            <div class="question-preview" style="color: var(--tg-theme-text-color); font-size: 14px; line-height: 1.4;">${preview}</div>
        `;
        
        div.addEventListener('mousedown', () => {
            div.style.transform = 'scale(0.98)';
        });
        
        div.addEventListener('mouseup', () => {
            div.style.transform = 'scale(1)';
        });
        
        div.addEventListener('mouseleave', () => {
            div.style.transform = 'scale(1)';
        });
        
        div.onclick = async () => await useQuestionDirectly(index);
        questionsList.appendChild(div);
    });
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
async function useQuestionDirectly(index) {
    const questions = AppState.questions || [];
    const question = questions[index];
    
    if (!question) {
        showAlert('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    displayAskedQuestion(question.text);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    SuggestedQuestionsState.userQuestion = question.text;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –ª–æ–∞–¥–µ—Ä
    showLoader();
    
    try {
        const userId = getUserId();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º prompt_id –≤–º–µ—Å—Ç–æ id –¥–ª—è question_id (–∫–∞–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ)
        const questionId = question.prompt_id || question.id;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const response = await fetch(`${CONFIG.API_BASE_URL}/ask_library`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                question: question.text,
                question_id: questionId,
                user_id: userId,
                role: AppState.profile.role,
                specialization: AppState.profile.specialization
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            await displayAnswer(question.text, data.answer);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            AppState.history.unshift({
                id: Date.now(),
                question: question.text,
                answer: data.answer,
                timestamp: new Date(),
                role: AppState.profile.role,
                specialization: AppState.profile.specialization,
                cached: data.cached || false
            });
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(async () => {
                await loadHistory();
                console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ë–î');
            }, 500);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Å –æ—Ç–≤–µ—Ç–æ–º
            showScreen('ask-question');
            
            // –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ displayAnswer
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
        hideLoader();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
function filterQuestions() {
    const search = AppState.questionFilters.search.toLowerCase();
    const category = AppState.questionFilters.category;
    
    AppState.questions = AppState.allQuestions.filter(question => {
        const matchesSearch = !search || 
            question.text.toLowerCase().includes(search) || 
            question.title.toLowerCase().includes(search);
            
        const matchesCategory = !category || question.category === category;
        
        return matchesSearch && matchesCategory;
    });
    
    renderQuestions();
}

function setupQuestionFilters() {
    const searchInput = document.getElementById('questions-search');
    const categoryFilter = document.getElementById('category-filter');
    const clearButton = document.getElementById('clear-filters');
    
    if (!searchInput || !categoryFilter || !clearButton) return;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categoryFilter.innerHTML = '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
    AppState.questionCategories.forEach(cat => {
        const option = document.createElement('option');
        option.value = cat.category;
        option.textContent = `${cat.category} (${cat.count})`;
        categoryFilter.appendChild(option);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    searchInput.addEventListener('input', debounce((e) => {
        AppState.questionFilters.search = e.target.value;
        filterQuestions();
    }, 300));
    
    categoryFilter.addEventListener('change', (e) => {
        AppState.questionFilters.category = e.target.value;
        filterQuestions();
    });
    
    clearButton.addEventListener('click', () => {
        searchInput.value = '';
        categoryFilter.value = '';
        AppState.questionFilters.search = '';
        AppState.questionFilters.category = '';
        filterQuestions();
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
function createQuestionsLibraryScreen() {
    const header = document.getElementById('library-header');
    const questionsList = document.getElementById('questions-list');
    
    if (!header || !questionsList) return;
    
    header.innerHTML = '';
    header.appendChild(createScreenHeader('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤'));
    
    questionsList.innerHTML = '<p style="color: var(--tg-theme-hint-color); text-align: center; padding: 20px;">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...</p>';
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    setTimeout(() => {
        setupQuestionFilters();
        renderQuestions();
    }, 100);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
function renderHistory() {
    const historyList = document.getElementById('history-list');
    
    if (!historyList) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (AppState.history.length === 0 && AppState.history === null) {
        showHistoryLoadingSkeleton(historyList);
        return;
    }
    
    historyList.innerHTML = '';
    
    console.log('–†–µ–Ω–¥–µ—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', AppState.history.length);
    
    if (AppState.history.length === 0) {
        const emptyState = document.createElement('div');
        emptyState.style.cssText = `
            text-align: center;
            padding: 40px 20px;
            color: var(--tg-theme-hint-color);
        `;
        emptyState.innerHTML = `
            <div style="font-size: 48px; margin-bottom: 16px;">üìú</div>
            <h3 style="margin: 0 0 8px 0; font-size: 18px; font-weight: 600; color: var(--tg-theme-text-color);">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h3>
            <p style="margin: 0; font-size: 14px; line-height: 1.5;">–ó–∞–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</p>
        `;
        historyList.appendChild(emptyState);
        return;
    }
    
    AppState.history.forEach((item, index) => {
        const div = document.createElement('div');
        div.className = 'history-item';
        div.style.cssText = `
            background: var(--tg-theme-secondary-bg-color);
            border: 1px solid var(--tg-theme-section-separator-color);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: transform 0.2s ease;
        `;
        
        const date = new Date(item.timestamp).toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        const questionPreview = item.question.length > 80 ? 
            item.question.substring(0, 80) + '...' : 
            item.question;
            
        const answerPreview = item.answer.replace(/<[^>]*>/g, ''); // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        const shortAnswer = answerPreview.length > 100 ? 
            answerPreview.substring(0, 100) + '...' : 
            answerPreview;
        
        div.innerHTML = `
            <div class="history-header" style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;">
                <div class="history-date" style="color: var(--tg-theme-hint-color); font-size: 12px;">${date}</div>
            </div>
            <div class="history-question" style="color: var(--tg-theme-text-color); font-weight: 600; font-size: 14px; margin-bottom: 8px;">${questionPreview}</div>
            <div class="history-answer" style="color: var(--tg-theme-hint-color); font-size: 13px; line-height: 1.4;">${shortAnswer}</div>
        `;
        
        div.addEventListener('mousedown', () => {
            div.style.transform = 'scale(0.98)';
        });
        
        div.addEventListener('mouseup', () => {
            div.style.transform = 'scale(1)';
        });
        
        div.addEventListener('mouseleave', () => {
            div.style.transform = 'scale(1)';
        });
        
        div.onclick = () => showHistoryDetail(item);
        historyList.appendChild(div);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏
function showHistoryDetail(item) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    let modal = document.getElementById('history-modal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'history-modal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            padding: 20px;
        `;
        document.body.appendChild(modal);
    }
    
    const date = new Date(item.timestamp).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    modal.innerHTML = `
        <div class="modal-content" style="
            background: var(--tg-theme-bg-color);
            border-radius: 16px;
            max-width: 90%;
            max-height: 80%;
            overflow-y: auto;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        ">
            <div class="modal-header" style="
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 20px 20px 16px 20px;
                border-bottom: 1px solid var(--tg-theme-section-separator-color);
            ">
                <h3 style="margin: 0; color: var(--tg-theme-text-color); font-size: 18px; font-weight: 600;">–î–µ—Ç–∞–ª–∏ –¥–∏–∞–ª–æ–≥–∞</h3>
                <button class="close-btn" onclick="closeHistoryModal()" style="
                    background: none;
                    border: none;
                    font-size: 24px;
                    color: var(--tg-theme-hint-color);
                    cursor: pointer;
                    padding: 0;
                    width: 32px;
                    height: 32px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    border-radius: 50%;
                ">√ó</button>
            </div>
            <div class="modal-body" style="padding: 20px;">
                <div class="history-detail-meta" style="
                    display: flex;
                    justify-content: flex-end;
                    align-items: center;
                    margin-bottom: 16px;
                    padding: 12px;
                    background: var(--tg-theme-secondary-bg-color);
                    border-radius: 8px;
                ">
                    <span style="color: var(--tg-theme-hint-color); font-size: 14px;">${date}</span>
                </div>
                
                <div class="history-detail-question" style="margin-bottom: 20px;">
                    <h4 style="color: var(--tg-theme-text-color); margin-bottom: 8px; font-size: 16px; font-weight: 600;">–í–æ–ø—Ä–æ—Å:</h4>
                    <div style="
                        background: var(--tg-theme-secondary-bg-color);
                        padding: 12px;
                        border-radius: 8px;
                        color: var(--tg-theme-text-color);
                        line-height: 1.5;
                    ">${item.question}</div>
                </div>
                
                <div class="history-detail-answer">
                    <h4 style="color: var(--tg-theme-text-color); margin-bottom: 8px; font-size: 16px; font-weight: 600;">–û—Ç–≤–µ—Ç:</h4>
                    <div style="
                        background: var(--tg-theme-secondary-bg-color);
                        padding: 12px;
                        border-radius: 8px;
                        color: var(--tg-theme-text-color);
                        line-height: 1.6;
                    " class="answer-text">${convertMarkdownToHtml(formatAnswerText(item.answer))}</div>
                </div>
            </div>
        </div>
    `;
    
    modal.style.display = 'flex';
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.onclick = (e) => {
        if (e.target === modal) {
            closeHistoryModal();
        }
    };
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏
function closeHistoryModal() {
    const modal = document.getElementById('history-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
async function clearHistory() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    showConfirmationModal(
        '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é?',
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∏–∞–ª–æ–≥–∏ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.',
        async () => {
            try {
                showLoader();
                const userId = getUserId();
                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
                
                const response = await fetch(`${CONFIG.API_BASE_URL}/history/${userId}`, {
                    method: 'DELETE'
                });
                
                console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏:', response.status, response.statusText);
                
                if (response.ok) {
                    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    AppState.history = [];
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    await loadHistory();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    renderHistory();
                    showAlert('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');
                    
                    console.log('–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞');
                } else {
                    const errorText = await response.text();
                    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', response.status, errorText);
                    throw new Error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${response.status}`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
                showAlert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ' + error.message);
            } finally {
                hideLoader();
            }
        }
    );
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏
function createHistoryScreen() {
    const header = document.getElementById('history-header');
    const historyList = document.getElementById('history-list');
    
    if (!header || !historyList) return;
    
    header.innerHTML = '';
    const headerElement = createScreenHeader('–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤');
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å" –≤ —Å—Ç–∏–ª–µ Telegram UI –¥–ª—è –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const clearButton = document.createElement('button');
    clearButton.textContent = '–û—á–∏—Å—Ç–∏—Ç—å';
    clearButton.style.cssText = `
        font-size: 16px;
        font-weight: 500;
        color: var(--tg-theme-destructive-text-color); /* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π */
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px 0; /* –¢–∞–∫–æ–π –∂–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ø–∞–¥–¥–∏–Ω–≥ –∫–∞–∫ —É "–ù–∞–∑–∞–¥" */
        margin-left: auto;
        -webkit-tap-highlight-color: transparent;
    `;

    clearButton.onclick = clearHistory;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    clearButton.addEventListener('mousedown', () => clearButton.style.opacity = '0.7');
    clearButton.addEventListener('mouseup', () => clearButton.style.opacity = '1');
    clearButton.addEventListener('mouseleave', () => clearButton.style.opacity = '1');
    
    headerElement.appendChild(clearButton);
    
    header.appendChild(headerElement);
    
    historyList.innerHTML = '<p style="color: var(--tg-theme-hint-color); text-align: center; padding: 20px;">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</p>';
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é
    setTimeout(() => {
        renderHistory();
    }, 100);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏
function updateSpecializations() {
    const roleSelect = document.getElementById('role-select');
    const specializationSelect = document.getElementById('specialization-select');
    
    if (!roleSelect || !specializationSelect) return;
    
    const role = roleSelect.value;
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    specializationSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é</option>';
    
    // –î–ª—è PO/PM —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (role === 'PO/PM') {
        const option = document.createElement('option');
        option.value = 'PO/PM';
        option.textContent = 'PO/PM';
        option.selected = true;
        specializationSelect.appendChild(option);
        specializationSelect.disabled = true;
    } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        specializationSelect.disabled = false;
        specializations.forEach(spec => {
            const option = document.createElement('option');
            option.value = spec.value;
            option.textContent = spec.label;
            specializationSelect.appendChild(option);
        });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    setTimeout(() => {
        updateProfileInfo();
    }, 100);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileInfo() {
    const profileName = document.getElementById('profile-name');
    const profileStatus = document.getElementById('profile-status');
    
    if (!profileName || !profileStatus) return;
    
    const roleSelect = document.getElementById('role-select');
    const specializationSelect = document.getElementById('specialization-select');
    
    if (roleSelect) AppState.profile.role = roleSelect.value;
    if (specializationSelect) AppState.profile.specialization = specializationSelect.value;
    
    if (AppState.profile.role && AppState.profile.specialization) {
        profileName.textContent = `${AppState.profile.role} ‚Ä¢ ${AppState.profile.specialization}`;
        profileStatus.textContent = '–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
    } else {
        profileName.textContent = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è';
        profileStatus.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function renderProfile() {
    const roleSelect = document.getElementById('role-select');
    const specializationSelect = document.getElementById('specialization-select');
    
    if (!roleSelect || !specializationSelect) return;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
    roleSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å</option>';
    roles.forEach(role => {
        const option = document.createElement('option');
        option.value = role.value;
        option.textContent = role.label;
        roleSelect.appendChild(option);
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    if (AppState.profile.role) {
        roleSelect.value = AppState.profile.role;
        updateSpecializations();
        
        if (AppState.profile.specialization) {
            specializationSelect.value = AppState.profile.specialization;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    roleSelect.addEventListener('change', function() {
        AppState.profile.role = this.value;
        updateSpecializations();
        updateProfileInfo();
    });
    
    specializationSelect.addEventListener('change', async function() {
        AppState.profile.specialization = this.value;
        updateProfileInfo();
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (AppState.profile.role && AppState.profile.specialization) {
            await loadQuestions();
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    updateProfileInfo();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
async function saveProfile() {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å...');
    
    const roleSelect = document.getElementById('role-select');
    const specializationSelect = document.getElementById('specialization-select');
    
    if (!roleSelect || !specializationSelect) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã select –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        return;
    }
    
    AppState.profile.role = roleSelect.value;
    AppState.profile.specialization = specializationSelect.value;
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', AppState.profile);
    
    if (!AppState.profile.role || !AppState.profile.specialization) {
        console.warn('‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
        showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è');
        return;
    }
    
    try {
        const userId = getUserId();
        console.log('üîë User ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', userId);
        
        const saveUrl = `${CONFIG.API_BASE_URL}/profile/${userId}`;
        console.log('üåê URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saveUrl);
        
        const requestData = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(AppState.profile)
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', requestData);
        
        const response = await fetch(saveUrl, requestData);
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', response.status);
        
        if (response.ok) {
            const responseData = await response.json();
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', responseData);
            
            console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏...');
            await loadQuestions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏
            
            showAlert('–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            showScreen('main-menu');
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ API —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', {
                status: response.status,
                statusText: response.statusText,
                error: errorText
            });
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${response.status}`);
        }
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: error.message,
            stack: error.stack,
            type: error.constructor.name
        });
        showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
function createProfileScreen() {
    const header = document.getElementById('profile-header');
    const profileContent = document.getElementById('profile-content');
    
    if (!header || !profileContent) return;
    
    header.innerHTML = '';
    header.appendChild(createScreenHeader('–ü—Ä–æ—Ñ–∏–ª—å'));
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ—Ñ–∏–ª—è
    profileContent.innerHTML = `
        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ -->
        <div class="profile-info" style="display: flex; align-items: center; margin-bottom: 24px; padding: 16px; background: var(--tg-theme-secondary-bg-color); border-radius: 12px;">
            <div class="profile-avatar" style="margin-right: 16px;">
                <div class="avatar-placeholder" style="width: 60px; height: 60px; background: var(--tg-theme-button-color); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 24px;">üë§</div>
            </div>
            <div class="profile-details">
                <h3 id="profile-name" style="color: var(--tg-theme-text-color); margin: 0 0 4px 0; font-size: 18px; font-weight: 600;">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è</h3>
                <p id="profile-status" style="color: var(--tg-theme-hint-color); margin: 0; font-size: 14px;">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ</p>
            </div>
        </div>

        <!-- –§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è -->
        <div class="profile-form">
            <div class="form-section" style="margin-bottom: 24px;">
                <h4 style="color: var(--tg-theme-text-color); margin-bottom: 8px;">–†–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ</h4>
                <div class="select-wrapper" style="position: relative;">
                    <select id="role-select" onchange="updateSpecializations()" style="width: 100%; padding: 12px; border: 1px solid var(--tg-theme-section-separator-color); border-radius: 8px; background: var(--tg-theme-secondary-bg-color); color: var(--tg-theme-text-color); font-size: 16px; appearance: none;">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å</option>
                    </select>
                    <div class="select-icon" style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); pointer-events: none; color: var(--tg-theme-hint-color);">‚ñº</div>
                </div>
                <p class="field-description" style="color: var(--tg-theme-hint-color); font-size: 12px; margin-top: 4px;">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å</p>
            </div>
            
            <div class="form-section" style="margin-bottom: 24px;">
                <h4 style="color: var(--tg-theme-text-color); margin-bottom: 8px;">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</h4>
                <div class="select-wrapper" style="position: relative;">
                    <select id="specialization-select" style="width: 100%; padding: 12px; border: 1px solid var(--tg-theme-section-separator-color); border-radius: 8px; background: var(--tg-theme-secondary-bg-color); color: var(--tg-theme-text-color); font-size: 16px; appearance: none;">
                        <option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å</option>
                    </select>
                    <div class="select-icon" style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); pointer-events: none; color: var(--tg-theme-hint-color);">‚ñº</div>
                </div>
                <p class="field-description" style="color: var(--tg-theme-hint-color); font-size: 12px; margin-top: 4px;">–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é</p>
            </div>
        </div>
        
        <div class="profile-actions">
            <button class="primary-btn full-width" onclick="saveProfile()" style="width: 100%; padding: 16px; background: var(--tg-theme-button-color); color: var(--tg-theme-button-text-color); border: none; border-radius: 8px; font-size: 16px; font-weight: 600; cursor: pointer;">
                <span class="btn-icon">üíæ</span>
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            </button>
        </div>
    `;
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    setTimeout(() => {
        renderProfile();
    }, 100);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
function initCharCounter() {
    const textarea = document.getElementById('feedback-input');
    if (textarea) {
        updateCharCounter();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
function updateCharCounter() {
    const textarea = document.getElementById('feedback-input');
    const charCounter = document.getElementById('char-counter');
    
    if (textarea && charCounter) {
        const length = textarea.value.length;
        const maxLength = 1000;
        
        charCounter.textContent = `${length}/${maxLength}`;
        
        if (length > maxLength * 0.9) {
            charCounter.style.color = 'var(--tg-theme-destructive-text-color, #ff4444)';
        } else if (length > maxLength * 0.7) {
            charCounter.style.color = 'var(--tg-theme-accent-text-color, #ff8800)';
        } else {
            charCounter.style.color = 'var(--tg-theme-hint-color)';
        }
    }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π alert
function safeAlert(msg) {
    try {
        if (tg && typeof tg.showAlert === 'function') {
            tg.showAlert(String(msg));
        } else {
            alert(String(msg));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', msg);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async function sendFeedback() {
    const feedbackInput = document.getElementById('feedback-input');
    const sendBtn = document.getElementById('feedback-submit-btn');
    const btnText = sendBtn.querySelector('.btn-text');
    const spinner = sendBtn.querySelector('.spinner');
    const feedbackForm = document.querySelector('.feedback-form');
    const feedbackSuccess = document.getElementById('feedback-success');
    
    const feedback = feedbackInput.value.trim();
    if (!feedback) {
        safeAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤');
        feedbackInput.focus();
        return;
    }
    
    if (feedback.length < 10) {
        safeAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
        feedbackInput.focus();
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ
    sendBtn.disabled = true;
    btnText.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    if (spinner) spinner.classList.remove('hidden');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    sendBtn.style.transform = 'scale(0.98)';
    
    try {
        const userId = getUserId();
        const userName = AppState.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const userUsername = AppState.user?.username || '–Ω–µ —É–∫–∞–∑–∞–Ω';
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanFeedback = feedback.replace(/[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F]/g, '').trim();
        const cleanUserName = String(userName).replace(/[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F]/g, '').trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const cleanUsername = String(userUsername).replace(/[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F]/g, '').trim() || '–Ω–µ —É–∫–∞–∑–∞–Ω';
        
        console.log('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            userId: userId,
            userName: userName,
            userUsername: userUsername,
            feedback: feedback
        });
        
        console.log('–û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
            userId: userId,
            userName: cleanUserName,
            userUsername: cleanUsername,
            feedback: cleanFeedback
        });
        
        const requestData = {
            feedback: cleanFeedback,
            user_id: userId,
            user_name: cleanUserName,
            username: cleanUsername,
            role: AppState.profile.role || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            specialization: AppState.profile.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            category: 'general'
        };
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', requestData);
        console.log('URL:', `${CONFIG.API_BASE_URL}/feedback`);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        try {
            const testResponse = await fetch(`${CONFIG.API_BASE_URL}/test`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({test: 'connection'})
            });
            console.log('–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', testResponse.status, testResponse.statusText);
            if (!testResponse.ok) {
                throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${testResponse.status}`);
            }
        } catch (testError) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', testError);
            throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.');
        }
        
        const response = await fetch(`${CONFIG.API_BASE_URL}/feedback`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        });
        
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        
        if (response.ok) {
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            setTimeout(() => {
                if (feedbackForm) feedbackForm.classList.add('hidden');
                if (feedbackSuccess) feedbackSuccess.classList.remove('hidden');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏—é
                triggerConfettiAnimation();
            }, 300);
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            feedbackInput.value = '';
            
        } else {
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            let errorMessage = `–û—à–∏–±–∫–∞ ${response.status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;
            try {
                const errorData = await response.json();
                console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorData);
                errorMessage = errorData.error || errorMessage;
            } catch (parseError) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É:', parseError);
                const errorText = await response.text();
                console.log('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
            }
            throw new Error(errorMessage);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É, —É–±–µ–¥–∏–≤—à–∏—Å—å, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        const finalMessage = String(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
        safeAlert(finalMessage);
        
        // –í—Å—Ç—Ä—è—Ö–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        sendBtn.style.animation = 'shake 0.5s ease-in-out';
        setTimeout(() => {
            sendBtn.style.animation = '';
        }, 500);
        
    } finally {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sendBtn.disabled = false;
        btnText.textContent = 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
        if (spinner) spinner.classList.add('hidden');
        sendBtn.style.transform = '';
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
function triggerConfettiAnimation() {
    const confettiElements = document.querySelectorAll('.confetti');
    confettiElements.forEach((confetti, index) => {
        confetti.style.animationDelay = `${index * 0.1}s`;
        confetti.style.animationDuration = `${2 + Math.random()}s`;
    });
}

// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function resetFeedbackForm() {
    const feedbackInput = document.getElementById('feedback-input');
    const feedbackForm = document.querySelector('.feedback-form');
    const feedbackSuccess = document.getElementById('feedback-success');
    const charCounter = document.getElementById('char-counter');
    
    if (feedbackInput) {
        feedbackInput.value = '';
    }
    
    if (charCounter) {
        charCounter.textContent = '0/1000';
        charCounter.style.color = 'var(--tg-theme-hint-color)';
    }
    
    if (feedbackForm) {
        feedbackForm.classList.remove('hidden');
    }
    if (feedbackSuccess) {
        feedbackSuccess.classList.add('hidden');
    }
    
    if (feedbackInput) {
        setTimeout(() => {
            feedbackInput.focus();
        }, 100);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function initFeedbackScreen() {
    initCharCounter();
    resetFeedbackForm();
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function createFeedbackScreen() {
    const header = document.getElementById('feedback-header');
    const feedbackContent = document.getElementById('feedback-content');
    
    if (!header || !feedbackContent) return;
    
    header.innerHTML = '';
    header.appendChild(createScreenHeader('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'));
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedbackContent.innerHTML = `
        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è -->
        <div class="feedback-hero" style="text-align: center; margin-bottom: 20px; padding: 16px; background: var(--tg-theme-secondary-bg-color); border-radius: 12px;">
            <div class="feedback-icon-large" style="font-size: 32px; margin-bottom: 8px;">üí¨</div>
            <h3 style="color: var(--tg-theme-text-color); margin: 0 0 6px 0; font-size: 18px; font-weight: 600;">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º</h3>
            <p style="color: var(--tg-theme-hint-color); margin: 0; font-size: 14px; line-height: 1.4;">–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º –¥–µ–ª–∞—Ç—å GigaMentor –ª—É—á—à–µ!</p>
        </div>

        <!-- –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ -->
        <div class="feedback-form">
            <div class="input-group" style="margin-bottom: 16px;">
                <label for="feedback-input" style="display: block; color: var(--tg-theme-text-color); font-weight: 500; margin-bottom: 8px;">
                    <span class="label-text">–í–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</span>
                </label>
                <div class="textarea-wrapper" style="position: relative;">
                    <textarea 
                        id="feedback-input" 
                        placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö..."
                        maxlength="1000"
                        oninput="updateCharCounter()"
                        style="
                            width: 100%;
                            min-height: 120px;
                            background: var(--tg-theme-secondary-bg-color);
                            border: 1px solid var(--tg-theme-section-separator-color);
                            border-radius: 8px;
                            padding: 12px;
                            font-size: 16px;
                            color: var(--tg-theme-text-color);
                            resize: vertical;
                            font-family: inherit;
                            line-height: 1.4;
                        "
                    ></textarea>
                    <div id="char-counter" class="char-counter" style="
                        position: absolute;
                        bottom: 8px;
                        right: 12px;
                        font-size: 12px;
                        color: var(--tg-theme-hint-color);
                        background: var(--tg-theme-bg-color);
                        padding: 2px 4px;
                        border-radius: 4px;
                    ">0/1000</div>
                </div>
            </div>
            
            <button id="feedback-submit-btn" class="primary-btn full-width" onclick="sendFeedback()" style="
                width: 100%;
                padding: 16px;
                background: var(--tg-theme-button-color);
                color: var(--tg-theme-button-text-color);
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
            ">
                <span class="btn-text">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</span>
                <div class="spinner hidden" style="width: 16px; height: 16px;"></div>
            </button>
        </div>

        <!-- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ -->
        <div id="feedback-success" class="feedback-success hidden" style="text-align: center; padding: 40px 20px;">
            <div class="success-animation" style="position: relative; margin-bottom: 20px;">
                <div class="success-icon" style="font-size: 64px; margin-bottom: 16px;">üéâ</div>
                <div class="success-confetti" style="position: absolute; top: 0; left: 50%; transform: translateX(-50%); width: 100px; height: 100px; pointer-events: none;">
                    <div class="confetti" style="position: absolute; width: 10px; height: 10px; background: #ff6b6b; animation: confetti-fall 3s ease-out infinite;"></div>
                    <div class="confetti" style="position: absolute; width: 10px; height: 10px; background: #4ecdc4; animation: confetti-fall 3s ease-out infinite;"></div>
                    <div class="confetti" style="position: absolute; width: 10px; height: 10px; background: #45b7d1; animation: confetti-fall 3s ease-out infinite;"></div>
                    <div class="confetti" style="position: absolute; width: 10px; height: 10px; background: #f9ca24; animation: confetti-fall 3s ease-out infinite;"></div>
                    <div class="confetti" style="position: absolute; width: 10px; height: 10px; background: #6c5ce7; animation: confetti-fall 3s ease-out infinite;"></div>
                </div>
            </div>
            <h3 style="color: var(--tg-theme-text-color); margin: 0 0 8px 0; font-size: 20px; font-weight: 600;">–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!</h3>
            <p style="color: var(--tg-theme-hint-color); margin: 0 0 20px 0; font-size: 14px; line-height: 1.5;">–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.</p>
            <div class="success-actions" style="display: flex; gap: 12px; justify-content: center;">
                <button class="primary-btn" onclick="resetFeedbackForm()" style="
                    padding: 12px 20px;
                    background: var(--tg-theme-button-color);
                    color: var(--tg-theme-button-text-color);
                    border: none;
                    border-radius: 8px;
                    font-size: 14px;
                    font-weight: 500;
                    cursor: pointer;
                ">
                    <span>‚ú® –û—Å—Ç–∞–≤–∏—Ç—å –µ—â–µ –æ—Ç–∑—ã–≤</span>
                </button>
                <button class="secondary-btn" onclick="showScreen('main-menu')" style="
                    padding: 12px 20px;
                    background: transparent;
                    color: var(--tg-theme-button-color);
                    border: 1px solid var(--tg-theme-button-color);
                    border-radius: 8px;
                    font-size: 14px;
                    font-weight: 500;
                    cursor: pointer;
                ">
                    <span>üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</span>
                </button>
            </div>
        </div>
    `;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    setTimeout(() => {
        initFeedbackScreen();
    }, 100);
}

// –£–ü–†–û–©–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è question_id
// –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º question_id = 888 –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (–∫–∞–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ)
async function detectQuestionId(questionText) {
    console.log(`üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞: "${questionText}" ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º question_id = 888`);
    return null; // –í—Å–µ–≥–¥–∞ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
function displayAskedQuestion(question) {
    const askedQuestionContainer = document.getElementById('asked-question-container');
    const askedQuestionText = document.getElementById('asked-question-text');
    
    if (askedQuestionContainer && askedQuestionText) {
        askedQuestionText.textContent = question;
        askedQuestionContainer.classList.remove('hidden');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async function sendQuestion() {
    console.log('‚ùì –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å...');
    
    const questionInput = document.getElementById('question-input');
    const sendBtn = document.getElementById('send-question');
    
    if (!questionInput || !sendBtn) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        return;
    }
    
    const question = questionInput.value.trim();
    console.log('üìù –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:', question);
    
    if (!question) {
        console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å');
        showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    const userId = getUserId();
    console.log('üîë User ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', userId);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    displayAskedQuestion(question);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –ª–æ–∞–¥–µ—Ä
    showLoader();
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
    sendBtn.disabled = true;
    const btnText = sendBtn.querySelector('.btn-text') || sendBtn;
    const spinner = sendBtn.querySelector('.spinner');
    
    btnText.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    if (spinner) spinner.classList.remove('hidden');
    
    try {
        // –£–ü–†–û–©–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ (question_id = null ‚Üí 888 –Ω–∞ –±—ç–∫–µ–Ω–¥–µ)
        const requestPayload = {
            question: question,
            user_id: userId,
            role: AppState.profile.role,
            specialization: AppState.profile.specialization,
            question_id: null  // –í—Å–µ–≥–¥–∞ null –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥):', requestPayload);
        
        // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º endpoint –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        const askUrl = `${CONFIG.API_BASE_URL}/ask`;
        
        console.log('üåê URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', askUrl, '(free input, question_id = 888)');
        
        const response = await fetch(askUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestPayload)
        });
        
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', response.status);
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', data);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            await displayAnswer(question, data.answer);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            AppState.history.unshift({
                id: Date.now(),
                question: question,
                answer: data.answer,
                timestamp: new Date(),
                role: AppState.profile.role,
                specialization: AppState.profile.specialization
            });
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(async () => {
                await loadHistory();
                console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ë–î');
            }, 500);
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            questionInput.value = '';
            console.log('‚úÖ –í–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            
            // –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ displayAnswer
            
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ API –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞:', {
                status: response.status,
                statusText: response.statusText,
                error: errorText
            });
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        }
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: error.message,
            stack: error.stack,
            type: error.constructor.name
        });
        showAlert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –ª–æ–∞–¥–µ—Ä
        hideLoader();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ
        sendBtn.disabled = false;
        btnText.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
        if (spinner) spinner.classList.add('hidden');
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π
function formatAnswerText(text) {
    if (!text) return '';
    
    console.log('üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', text.substring(0, 200) + '...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
    const processedText = postProcessAnswer(text);
    console.log('üîß –ü–æ—Å–ª–µ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', processedText.substring(0, 200) + '...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const headers = processedText.match(/^#{1,6}\s+.+$/gm);
    if (headers) {
        console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    } else {
        console.log('‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ');
    }
    
    return processedText;
}

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Markdown –≤ HTML
function convertMarkdownToHtml(text) {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Markdown:', text.substring(0, 200) + '...');
    
    if (!text || typeof text !== 'string') {
        console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Markdown');
        return '';
    }

    let html = text;
    
    // 1. –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    html = html.trim();
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    html = html.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    
    // 2. –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ì–û–õ–û–í–ö–û–í (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è # (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ #)
    html = html.replace(/^# ([^\n]+)$/gm, '<h1 class="markdown-h1 slide-in">$1</h1>');
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è ## (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ ##)
    html = html.replace(/^## ([^\n]+)$/gm, '<h2 class="markdown-h2 slide-in">$1</h2>');
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è ### (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ ###)
    html = html.replace(/^### ([^\n]+)$/gm, '<h3 class="markdown-h3 slide-in">$1</h3>');
    
    // 3. –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –í–´–î–ï–õ–ï–ù–ò–ô
    // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **text**
    html = html.replace(/\*\*([^*\n]+)\*\*/g, '<strong>$1</strong>');
    
    // –ö—É—Ä—Å–∏–≤ *text*
    html = html.replace(/\*([^*\n]+)\*/g, '<em>$1</em>');
    
    // –ö–æ–¥ `text`
    html = html.replace(/`([^`\n]+)`/g, '<code>$1</code>');
    
    // 4. –û–ë–†–ê–ë–û–¢–ö–ê –°–ü–ò–°–ö–û–í
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º
    const blocks = html.split(/\n\s*\n/);
    const processedBlocks = blocks.map(block => {
        const lines = block.trim().split('\n');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫ —Å–ø–∏—Å–∫–æ–º
        const isOrderedList = lines.every(line => 
            line.trim() === '' || 
            /^\s*\d+\.\s/.test(line) || 
            /^<h[1-6]/.test(line) ||
            /^<strong>/.test(line)
        );
        
        const isUnorderedList = lines.every(line => 
            line.trim() === '' || 
            /^\s*[-*]\s/.test(line) || 
            /^\s*--\s/.test(line) || 
            /^<h[1-6]/.test(line) ||
            /^<strong>/.test(line)
        );
        
        if (isOrderedList && lines.some(line => /^\s*\d+\.\s/.test(line))) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            const listItems = lines
                .filter(line => /^\s*\d+\.\s/.test(line))
                .map(line => {
                    const content = line.replace(/^\s*\d+\.\s/, '').trim();
                    return `<li>${content}</li>`;
                })
                .join('\n');
            
            const nonListLines = lines
                .filter(line => !/^\s*\d+\.\s/.test(line) && line.trim() !== '')
                .join('\n');
            
            return nonListLines + (nonListLines ? '\n' : '') + `<ol class="markdown-list">\n${listItems}\n</ol>`;
        }
        
        if (isUnorderedList && lines.some(line => /^\s*[-*--]\s/.test(line))) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            const listItems = lines
                .filter(line => /^\s*[-*--]\s/.test(line))
                .map(line => {
                    const content = line.replace(/^\s*[-*--]\s/, '').trim();
                    return `<li>${content}</li>`;
                })
                .join('\n');
            
            const nonListLines = lines
                .filter(line => !/^\s*[-*--]\s/.test(line) && line.trim() !== '')
                .join('\n');
            
            return nonListLines + (nonListLines ? '\n' : '') + `<ul class="markdown-list">\n${listItems}\n</ul>`;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–∏—Å–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –±–ª–æ–∫
        return block;
    });
    
    html = processedBlocks.join('\n\n');
    
    // 5. –û–ë–†–ê–ë–û–¢–ö–ê –ê–ë–ó–ê–¶–ï–í
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const paragraphBlocks = html.split(/\n\s*\n/);
    const finalBlocks = paragraphBlocks.map(block => {
        const trimmedBlock = block.trim();
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
        if (!trimmedBlock) return '';
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã
        if (trimmedBlock.startsWith('<h') || 
            trimmedBlock.startsWith('<ul') || 
            trimmedBlock.startsWith('<ol') ||
            trimmedBlock.includes('</h') ||
            trimmedBlock.includes('</ul>') ||
            trimmedBlock.includes('</ol>')) {
            return trimmedBlock;
        }
        
        // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        const lines = trimmedBlock.split('\n').filter(line => line.trim());
        if (lines.length > 0 && !lines[0].startsWith('<')) {
            return `<p class="markdown-paragraph">${trimmedBlock.replace(/\n/g, '<br>')}</p>`;
        }
        
        return trimmedBlock;
    });
    
    html = finalBlocks.filter(block => block.trim()).join('\n\n');
    
    // 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    html = html.replace(/\n{3,}/g, '\n\n');
    
    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    html = html.replace(/<p[^>]*>\s*<\/p>/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
    html = html.replace(/<[uo]l[^>]*>\s*<\/[uo]l>/g, '');
    
    console.log('‚úÖ Markdown –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç:', html.substring(0, 300) + '...');
    
    return html.trim();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
async function displayAnswer(userQuestion, botAnswer) {
    const answerContainer = document.getElementById('answer-container');
    const answerContent = document.getElementById('answer-content');
    if (!answerContainer || !answerContent) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    SuggestedQuestionsState.userQuestion = userQuestion;
    SuggestedQuestionsState.botAnswer = botAnswer;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const formattedAnswer = formatAnswerText(botAnswer);
    const htmlAnswer = convertMarkdownToHtml(formattedAnswer);
    
    const answerCard = createCard(`
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
            <h3 style="color: var(--tg-theme-text-color); margin: 0;">–û—Ç–≤–µ—Ç:</h3>
            <button onclick="copyAnswerToClipboard()" style="
                background: var(--tg-theme-button-color);
                color: var(--tg-theme-button-text-color);
                border: none;
                padding: 8px 12px;
                border-radius: 8px;
                font-size: 14px;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 4px;
            ">
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            </button>
        </div>
        <div class="answer-text" style="color: var(--tg-theme-text-color);" id="answer-text-content">${htmlAnswer}</div>
    `);
    
    answerContent.innerHTML = '';
    answerContent.appendChild(answerCard);
    answerContainer.classList.remove('hidden');
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–∞–º–æ–º—É –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
    window.scrollTo({ top: 0, behavior: 'smooth' });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    await generateSuggestedQuestions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    setTimeout(async () => {
        await displayPreviousQuestions();
    }, 100);
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
async function copyAnswerToClipboard() {
    const answerElement = document.getElementById('answer-text-content');
    if (!answerElement) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ HTML —Ç–µ–≥–æ–≤
    const textContent = answerElement.innerText || answerElement.textContent;
    
    try {
        await navigator.clipboard.writeText(textContent);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
        const button = event.target.closest('button');
        const originalText = button.innerHTML;
        button.innerHTML = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
        button.style.background = 'var(--tg-theme-destructive-text-color)';
        
        setTimeout(() => {
            button.innerHTML = originalText;
            button.style.background = 'var(--tg-theme-button-color)';
        }, 2000);
        
        // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (tg.showAlert) {
            tg.showAlert('–û—Ç–≤–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = textContent;
        document.body.appendChild(textArea);
        textArea.select();
        
        try {
            document.execCommand('copy');
            showAlert('–û—Ç–≤–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        } catch (fallbackErr) {
            showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
        }
        
        document.body.removeChild(textArea);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
function displaySuggestedQuestions(questions) {
    const suggestedContainer = document.getElementById('suggested-questions');
    const suggestedList = document.getElementById('suggested-list');
    
    if (!suggestedContainer || !suggestedList) return;
    
    suggestedList.innerHTML = '';
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ 3
    const limitedQuestions = questions.slice(0, 3);
    
    limitedQuestions.forEach((question, index) => {
        const questionCard = document.createElement('div');
        questionCard.className = 'suggested-question-card';
        questionCard.style.cssText = `
            background: var(--tg-theme-secondary-bg-color);
            border: 1px solid var(--tg-theme-section-separator-color);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            overflow: hidden;
        `;
        
        questionCard.innerHTML = `
            <div style="display: flex; align-items: flex-start; gap: 12px;">
                <div style="
                    background: var(--tg-theme-button-color);
                    color: var(--tg-theme-button-text-color);
                    width: 24px;
                    height: 24px;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 12px;
                    font-weight: 600;
                    flex-shrink: 0;
                    margin-top: 2px;
                ">üí°</div>
                <div style="
                    color: var(--tg-theme-text-color);
                    font-size: 15px;
                    line-height: 1.4;
                    flex: 1;
                ">${question}</div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        questionCard.addEventListener('mousedown', () => {
            questionCard.style.transform = 'scale(0.98)';
            questionCard.style.backgroundColor = 'var(--tg-theme-section-bg-color)';
        });
        
        questionCard.addEventListener('mouseup', () => {
            questionCard.style.transform = 'scale(1)';
            questionCard.style.backgroundColor = 'var(--tg-theme-secondary-bg-color)';
        });
        
        questionCard.addEventListener('mouseleave', () => {
            questionCard.style.transform = 'scale(1)';
            questionCard.style.backgroundColor = 'var(--tg-theme-secondary-bg-color)';
        });
        
        questionCard.onclick = () => {
            document.getElementById('question-input').value = question;
            sendQuestion();
        };
        
        suggestedList.appendChild(questionCard);
    });
    
    suggestedContainer.classList.remove('hidden');
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
const SuggestedQuestionsState = {
    currentQuestions: [],
    userQuestion: '',
    botAnswer: ''
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async function generateSuggestedQuestions() {
    const suggestedContainer = document.getElementById('suggested-questions');
    const suggestedList = document.getElementById('suggested-list');
    
    if (!suggestedContainer || !suggestedList) return;
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
        suggestedList.innerHTML = '<div class="spinner" style="margin: 20px auto;"></div>';
        suggestedContainer.classList.remove('hidden');
        
        // –ü—Ä–æ–±—É–µ–º WebSocket
        const ws = new WebSocket(CONFIG.WEBSOCKET_URL);
        let wsTimeout = setTimeout(() => {
            ws.close();
            generateSuggestedQuestionsHTTP();
        }, 5000);
        
        ws.onopen = () => {
            clearTimeout(wsTimeout);
            ws.send(JSON.stringify({
                type: 'generate_questions',
                user_question: SuggestedQuestionsState.userQuestion,
                bot_answer: SuggestedQuestionsState.botAnswer,
                role: AppState.profile.role,
                specialization: AppState.profile.specialization
            }));
        };
        
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            if (data.type === 'suggested_questions') {
                const questions = Array.isArray(data.questions) ? data.questions : data.questions || [];
                SuggestedQuestionsState.currentQuestions = questions;
                displaySuggestedQuestions(questions);
                ws.close();
            }
        };
        
        ws.onerror = () => {
            clearTimeout(wsTimeout);
            generateSuggestedQuestionsHTTP();
        };
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ WebSocket:', error);
        generateSuggestedQuestionsHTTP();
    }
}

// HTTP fallback –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async function generateSuggestedQuestionsHTTP() {
    try {
        const response = await fetch(`${CONFIG.API_BASE_URL}/suggest_questions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_question: SuggestedQuestionsState.userQuestion,
                bot_answer: SuggestedQuestionsState.botAnswer,
                role: AppState.profile.role,
                specialization: AppState.profile.specialization
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            const questions = Array.isArray(data) ? data : data.questions || [];
            SuggestedQuestionsState.currentQuestions = questions;
            displaySuggestedQuestions(questions);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ HTTP –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        const suggestedContainer = document.getElementById('suggested-questions');
        if (suggestedContainer) {
            suggestedContainer.classList.add('hidden');
        }
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async function displayPreviousQuestions() {
    const previousContainer = document.getElementById('previous-questions');
    const previousList = document.getElementById('previous-list');
    
    if (!previousContainer || !previousList) return;
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
        const userId = getUserId();
        const response = await fetch(`${CONFIG.API_BASE_URL}/history/${userId}`);
        if (!response.ok) {
            previousContainer.classList.add('hidden');
            return;
        }
        
        const historyFromDB = await response.json();
        if (!historyFromDB || historyFromDB.length === 0) {
            previousContainer.classList.add('hidden');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–∏—Å–∫–ª—é—á–∞—è —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π)
        const recentQuestions = historyFromDB.slice(1, 4);
        
        if (!recentQuestions || recentQuestions.length === 0) {
            previousContainer.classList.add('hidden');
            return;
        }
        
        previousList.innerHTML = '';
    
        recentQuestions.forEach((historyItem, index) => {
            const historyCard = document.createElement('div');
            historyCard.className = 'previous-question-card';
            historyCard.style.cssText = `
                background: var(--tg-theme-secondary-bg-color);
                border: 1px solid var(--tg-theme-section-separator-color);
                border-radius: 12px;
                padding: 16px;
                margin-bottom: 8px;
                cursor: pointer;
                transition: all 0.2s ease;
                position: relative;
                overflow: hidden;
            `;
            
            const questionText = historyItem.question.length > 100 ? 
                historyItem.question.substring(0, 100) + '...' : 
                historyItem.question;
            
            historyCard.innerHTML = `
                <div style="display: flex; align-items: flex-start; gap: 12px;">
                    <div style="
                        background: var(--tg-theme-hint-color);
                        color: var(--tg-theme-bg-color);
                        width: 24px;
                        height: 24px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 12px;
                        font-weight: 600;
                        flex-shrink: 0;
                        margin-top: 2px;
                        opacity: 0.8;
                    ">üìú</div>
                    <div style="
                        color: var(--tg-theme-text-color);
                        font-size: 15px;
                        line-height: 1.4;
                        flex: 1;
                    ">${questionText}</div>
                </div>
            `;
            
            historyCard.onclick = () => {
                showHistoryDetail(historyItem);
            };
            
            previousList.appendChild(historyCard);
        });
        
        previousContainer.classList.remove('hidden');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        previousContainer.classList.add('hidden');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserProfile() {
    try {
        const userId = getUserId();
        const response = await fetch(`${CONFIG.API_BASE_URL}/profile/${userId}`);
        
        if (response.ok) {
            const profile = await response.json();
            AppState.profile = profile;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
async function loadRolesAndSpecializations() {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
    console.log('üìç API_BASE_URL:', CONFIG.API_BASE_URL);
    
    try {
        console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API...');
        const [rolesResponse, specsResponse] = await Promise.all([
            fetch(`${CONFIG.API_BASE_URL}/roles`),
            fetch(`${CONFIG.API_BASE_URL}/specializations`)
        ]);
        
        console.log('üìä –°—Ç–∞—Ç—É—Å—ã –æ—Ç–≤–µ—Ç–æ–≤:', {
            roles: rolesResponse.status,
            specializations: specsResponse.status
        });
        
        if (rolesResponse.ok && specsResponse.ok) {
            roles = await rolesResponse.json();
            specializations = await specsResponse.json();
            
            console.log('‚úÖ –†–æ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', roles);
            console.log('‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', specializations);
        } else {
            const rolesError = rolesResponse.ok ? null : await rolesResponse.text();
            const specsError = specsResponse.ok ? null : await specsResponse.text();
            
            console.error('‚ùå –û—à–∏–±–∫–∏ API:', {
                rolesStatus: rolesResponse.status,
                rolesError: rolesError,
                specsStatus: specsResponse.status,
                specsError: specsError
            });
            
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: error.message,
            stack: error.stack,
            type: error.constructor.name
        });
        
        // Fallback –¥–∞–Ω–Ω—ã–µ
        roles = [
            { "value": "PO/PM", "label": "PO/PM" },
            { "value": "–õ–∏–¥ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", "label": "–õ–∏–¥ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏" },
            { "value": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "label": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" },
            { "value": "–°—Ç–∞–∂–µ—Ä", "label": "–°—Ç–∞–∂–µ—Ä" }
        ];
        
        specializations = [
            { "value": "–ê–Ω–∞–ª–∏—Ç–∏–∫", "label": "–ê–Ω–∞–ª–∏—Ç–∏–∫" },
            { "value": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "label": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫" },
            { "value": "WEB", "label": "WEB" },
            { "value": "Java", "label": "Java" },
            { "value": "Python", "label": "Python" }
        ];
        
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
    }
}

async function loadQuestions() {
    console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...');
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:', AppState.profile);
    
    try {
        const role = AppState.profile.role || '';
        const specialization = AppState.profile.specialization || '';
        
        console.log('üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { role, specialization });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        const params = new URLSearchParams();
        if (role) params.append('role', role);
        if (specialization) params.append('specialization', specialization);
        
        const questionsUrl = `${CONFIG.API_BASE_URL}/questions${params.toString() ? '?' + params.toString() : ''}`;
        console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', questionsUrl);
        
        const questionsResponse = await fetch(questionsUrl);
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', questionsResponse.status);
        
        if (questionsResponse.ok) {
            AppState.allQuestions = await questionsResponse.json();
            AppState.questions = [...AppState.allQuestions]; // –ö–æ–ø–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
            console.log('‚úÖ –í–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                count: AppState.allQuestions.length,
                questions: AppState.allQuestions
            });
        } else {
            const errorText = await questionsResponse.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ API –≤–æ–ø—Ä–æ—Å–æ–≤:', {
                status: questionsResponse.status,
                statusText: questionsResponse.statusText,
                error: errorText
            });
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionsResponse.status}`);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
        try {
            const categoriesResponse = await fetch(`${CONFIG.API_BASE_URL}/questions/categories`);
            console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesResponse.status);
            
            if (categoriesResponse.ok) {
                AppState.questionCategories = await categoriesResponse.json();
                console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', AppState.questionCategories);
            } else {
                const catErrorText = await categoriesResponse.text();
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', {
                    status: categoriesResponse.status,
                    error: catErrorText
                });
                AppState.questionCategories = [];
            }
        } catch (categoriesError) {
            console.warn('‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesError);
            AppState.questionCategories = [];
        }
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: error.message,
            stack: error.stack,
            type: error.constructor.name
        });
        
        AppState.questions = [];
        AppState.allQuestions = [];
        AppState.questionCategories = [];
        
        console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤');
    }
    
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤:', {
        allQuestions: AppState.allQuestions.length,
        filteredQuestions: AppState.questions.length,
        categories: AppState.questionCategories.length
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
async function loadHistory() {
    try {
        const userId = getUserId();
        const response = await fetch(`${CONFIG.API_BASE_URL}/history/${userId}`);
        
        if (response.ok) {
            AppState.history = await response.json();
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        AppState.history = [];
    }
}

function showAlert(message) {
    if (tg && tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

// –õ–æ–∞–¥–µ—Ä—ã
function showLoader() {
    let loader = document.getElementById('global-loader');
    if (!loader) {
        loader = document.createElement('div');
        loader.id = 'global-loader';
        loader.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        `;
        loader.innerHTML = '<div class="spinner" style="width: 40px; height: 40px;"></div>';
        document.body.appendChild(loader);
    }
    loader.style.display = 'flex';
}

function hideLoader() {
    const loader = document.getElementById('global-loader');
    if (loader) {
        loader.style.display = 'none';
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function showConfirmationModal(title, message, onConfirm) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        backdrop-filter: blur(4px);
    `;
    
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: var(--tg-theme-bg-color);
        border-radius: 12px;
        padding: 24px;
        max-width: 320px;
        width: 90%;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        animation: modalSlideIn 0.3s ease-out;
    `;
    
    modalContent.innerHTML = `
        <h3 style="
            color: var(--tg-theme-text-color);
            margin: 0 0 12px 0;
            font-size: 18px;
            font-weight: 600;
            text-align: center;
        ">${title}</h3>
        <p style="
            color: var(--tg-theme-subtitle-text-color);
            margin: 0 0 24px 0;
            font-size: 14px;
            line-height: 1.4;
            text-align: center;
        ">${message}</p>
        <div style="
            display: flex;
            gap: 12px;
            justify-content: center;
        ">
            <button id="modal-cancel" style="
                background: var(--tg-theme-secondary-bg-color);
                color: var(--tg-theme-text-color);
                border: none;
                border-radius: 8px;
                padding: 12px 24px;
                font-size: 16px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.2s ease;
                min-width: 80px;
            ">–û—Ç–º–µ–Ω–∞</button>
            <button id="modal-confirm" style="
                background: var(--tg-theme-destructive-text-color, #ff3b30);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 24px;
                font-size: 16px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.2s ease;
                min-width: 80px;
            ">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
    `;
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    if (!document.getElementById('modal-animation-styles')) {
        const style = document.createElement('style');
        style.id = 'modal-animation-styles';
        style.textContent = `
            @keyframes modalSlideIn {
                from {
                    opacity: 0;
                    transform: scale(0.9) translateY(-20px);
                }
                to {
                    opacity: 1;
                    transform: scale(1) translateY(0);
                }
            }
        `;
        document.head.appendChild(style);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    const cancelButton = modalContent.querySelector('#modal-cancel');
    const confirmButton = modalContent.querySelector('#modal-confirm');
    
    const closeModal = () => {
        modalContent.style.animation = 'modalSlideIn 0.2s ease-in reverse';
        setTimeout(() => {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 200);
    };
    
    cancelButton.onclick = closeModal;
    confirmButton.onclick = () => {
        closeModal();
        if (onConfirm) onConfirm();
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.onclick = (e) => {
        if (e.target === modal) {
            closeModal();
        }
    };
    
    // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    [cancelButton, confirmButton].forEach(button => {
        button.addEventListener('mousedown', () => {
            button.style.transform = 'scale(0.95)';
        });
        
        button.addEventListener('mouseup', () => {
            button.style.transform = 'scale(1)';
        });
        
        button.addEventListener('mouseleave', () => {
            button.style.transform = 'scale(1)';
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ user_id
function getUserId() {
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ Telegram
    if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.id) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram user ID:', tg.initDataUnsafe.user.id);
        console.log('üìä –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', tg.initDataUnsafe.user);
        return tg.initDataUnsafe.user.id.toString();
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤ AppState
    if (AppState.user && AppState.user.id) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º AppState user ID:', AppState.user.id);
        console.log('üìä –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ AppState.user:', AppState.user);
        return AppState.user.id.toString();
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    const urlParams = new URLSearchParams(window.location.search);
    const userIdFromUrl = urlParams.get('user_id');
    if (userIdFromUrl) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º user ID –∏–∑ URL:', userIdFromUrl);
        return userIdFromUrl;
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage (–µ—Å–ª–∏ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏)
    const savedUserId = localStorage.getItem('telegram_user_id');
    if (savedUserId) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π user ID:', savedUserId);
        return savedUserId;
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log('- tg –æ–±—ä–µ–∫—Ç:', tg);
    console.log('- tg.initDataUnsafe:', tg?.initDataUnsafe);
    console.log('- AppState.user:', AppState.user);
    console.log('- URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', window.location.search);
    console.log('- localStorage telegram_user_id:', localStorage.getItem('telegram_user_id'));
    
    console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: guest');
    return 'guest';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_id –≤ localStorage
function saveUserId(userId) {
    if (userId && userId !== 'guest') {
        localStorage.setItem('telegram_user_id', userId);
        console.log('User ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:', userId);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown –ø–∞—Ä—Å–∏–Ω–≥–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
function testMarkdownParsing() {
    const testText = `# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1
## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2  
### Middle-–∞–Ω–∞–ª–∏—Ç–∏–∫
–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è.

- –ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞ 1
- –ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞ 2

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏ *–∫—É—Ä—Å–∏–≤*.`;

    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Markdown –ø–∞—Ä—Å–∏–Ω–≥:');
    console.log('–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:', testText);
    
    const formatted = formatAnswerText(testText);
    console.log('–ü–æ—Å–ª–µ formatAnswerText:', formatted);
    
    const html = convertMarkdownToHtml(formatted);
    console.log('–ü–æ—Å–ª–µ convertMarkdownToHtml:', html);
    
    return html;
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown
function testMarkdownParsing() {
    const testText = `# –û–∂–∏–¥–∞–Ω–∏—è –æ—Ç –õ–∏–¥–∞ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏

## Product Owner (PO):

### Middle-–∞–Ω–∞–ª–∏—Ç–∏–∫

- –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º –∏ –º–æ–¥–µ–ª–µ–π
- –ü–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

### Senior-–∞–Ω–∞–ª–∏—Ç–∏–∫

- –í–ª–∞–¥–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–æ–π

## –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫

1. –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
2. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
3. –†–∞–±–æ—Ç–∞ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã`;

    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Markdown:');
    console.log('–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:', testText);
    
    const result = convertMarkdownToHtml(testText);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const container = document.getElementById('chat-container');
    if (container) {
        const testDiv = document.createElement('div');
        testDiv.innerHTML = `
            <div class="message bot-message">
                <div class="message-content">
                    ${result}
            </div>
        </div>
    `;
        container.appendChild(testDiv);
        container.scrollTop = container.scrollHeight;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.testMarkdownParsing = testMarkdownParsing;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç RAG
function postProcessAnswer(text) {
    if (!text || typeof text !== 'string') {
        return text;
    }
    
    console.log('üîß –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞...');
    
    let processed = text;
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞
    // –ó–∞–º–µ–Ω—è–µ–º "###" –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    processed = processed.replace(/([^\n])###([^\s])/g, '$1$2');
    
    // –ó–∞–º–µ–Ω—è–µ–º "##" –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç  
    processed = processed.replace(/([^\n])##([^\s])/g, '$1$2');
    
    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ # –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    processed = processed.replace(/^(#{1,6})([^\s#])/gm, '$1 $2');
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    processed = processed.replace(/^(#{1,6}\s+.+)$/gm, '$1\n');
    
    // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —Ü–∏—Ñ—Ä—ã —Å —Ç–æ—á–∫–æ–π
    processed = processed.replace(/^(\d+\.)([^\s])/gm, '$1 $2');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —Ç–∏—Ä–µ
    processed = processed.replace(/^([-*])([^\s])/gm, '$1 $2');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã -- 
    // –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ --
    processed = processed.replace(/^--\s*$/gm, '');
    
    // –ó–∞–º–µ–Ω—è–µ–º -- –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ -
    processed = processed.replace(/^--\s+/gm, '- ');
    
    // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã -- –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
    processed = processed.replace(/\s--\s/g, ' ');
    
    // –£–±–∏—Ä–∞–µ–º -- –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
    processed = processed.replace(/\n--\n/g, '\n\n');
    
    // 5. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª–µ–µ 2 –ø–æ–¥—Ä—è–¥)
    processed = processed.replace(/\n{3,}/g, '\n\n');
    
    // 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –±–ª–æ–∫–æ–≤
    // –ü–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–∞–º–∏
    processed = processed.replace(/^(#{1,6}\s+.+)\n([-*\d])/gm, '$1\n\n$2');
    
    // –ü–æ—Å–ª–µ —Å–ø–∏—Å–∫–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    processed = processed.replace(/^([-*\d].+)\n(#{1,6}\s)/gm, '$1\n\n$2');
    
    // –ü–æ—Å–ª–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    processed = processed.replace(/^([^#\n-*\d].+)\n(#{1,6}\s)/gm, '$1\n\n$2');
    
    console.log('‚úÖ –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return processed.trim();
} 