import os
from dotenv import load_dotenv
import string
import asyncio
import pickle
from fastapi import FastAPI, WebSocket
import websockets
from langchain_community.document_loaders import TextLoader
from langchain_community.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_community.chat_models import GigaChat
from langchain_gigachat import GigaChat
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_core.documents import Document
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain_core.prompts import ChatPromptTemplate
from langchain.chains import create_retrieval_chain
from langchain.retrievers import EnsembleRetriever
from collections import defaultdict

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

api_key = os.getenv("GIGACHAT_API_KEY")
folder_path = os.path.join(os.path.dirname(__file__), "txt_docs")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
model_name = "sentence-transformers/paraphrase-multilingual-mpnet-base-v2"
model_kwargs = {'device': 'cpu'}
encode_kwargs = {'normalize_embeddings': False}
embedding = HuggingFaceEmbeddings(
    model_name=model_name,
    model_kwargs=model_kwargs,
    encode_kwargs=encode_kwargs
)

# –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π (—Ñ—Ä–æ–Ω—Ç -> –±—ç–∫–µ–Ω–¥)
ROLE_MAPPING = {
    "–ë–∏–∑–Ω–µ—Å-PO/PM": "role_PM",
    "–õ–∏–¥ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π": "role_lead",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": "role_employee"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def load_documents(folder_path):
    file_paths = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith(".txt")]
    docs = []
    for file_path in file_paths:
        loader = TextLoader(file_path)
        docs.extend(loader.load())
    return docs

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–æ–ª—è–º
def split_documents_by_role(docs):
    role_to_docs = defaultdict(list)
    for doc in docs:
        if "role_PM" in doc.metadata.get("source", ""):
            role_to_docs["PM"].append(doc)
        elif "role_employee" in doc.metadata.get("source", ""):
            role_to_docs["role_employee"].append(doc)
        elif "role_lead" in doc.metadata.get("source", ""):
            role_to_docs["role_lead"].append(doc)
        else:
            role_to_docs["other"].append(doc)
    return role_to_docs

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
def create_indexes(role_to_docs, embedding):
    role_to_index = {}
    for role, docs in role_to_docs.items():
        if docs:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏
            index_path = f"faiss_index_{role}.index"
            vector_store = FAISS.from_documents(docs, embedding=embedding)
            vector_store.save_local(index_path)
            role_to_index[role] = vector_store
            print(f"–ò–Ω–¥–µ–∫—Å –¥–ª—è —Ä–æ–ª–∏ '{role}' —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {index_path}")
    return role_to_index

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
def load_indexes(roles, embedding):
    role_to_index = {}
    for role in roles:
        index_path = f"faiss_index_{role}.index"
        if os.path.exists(index_path):
            vector_store = FAISS.load_local(index_path, embedding, allow_dangerous_deserialization=True)
            role_to_index[role] = vector_store
            print(f"–ò–Ω–¥–µ–∫—Å –¥–ª—è —Ä–æ–ª–∏ '{role}' –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {index_path}")
        else:
            print(f"–ò–Ω–¥–µ–∫—Å –¥–ª—è —Ä–æ–ª–∏ '{role}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return role_to_inde

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
docs = load_documents(folder_path)
text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=100)
split_docs = text_splitter.split_documents(docs)
role_to_docs = split_documents_by_role(split_docs)

roles = ["role_PM", "role_employee", "role_lead", "other"]
if not all(os.path.exists(f"faiss_index_{role}.index") for role in roles):
    print("–°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
    role_to_index = create_indexes(role_to_docs, embedding)
else:
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
    role_to_index = load_indexes(roles, embedding)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ GigaChat
def create_retrieval_chain_from_folder(role, specialization, prompt_template, embedding_retriever):
    template = string.Template(prompt_template)
    filled_prompt = template.substitute(role=role, specialization=specialization)
    prompt = ChatPromptTemplate.from_template(filled_prompt)

    llm = GigaChat(
        credentials=api_key,
        model='GigaChat',
        verify_ssl_certs=False,
        profanity_check=False
    )

    document_chain = create_stuff_documents_chain(llm=llm, prompt=prompt)
    retrieval_chain = create_retrieval_chain(embedding_retriever, document_chain)
    return retrieval_chain

"""@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GigaChat.
    await websocket.accept()
    question = await websocket.receive_text()
    role = await websocket.receive_text()
    specialization = await websocket.receive_text()
    question_id = await websocket.receive_text()
    question_id = int(question_id)
    print(question)
    print(role)
    print(specialization)
    prompt_template = """

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GigaChat."""
    await websocket.accept()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞
        question = await websocket.receive_text()
        role = await websocket.receive_text()  # –†–æ–ª—å –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞
        specialization = await websocket.receive_text()
        question_id = await websocket.receive_text()
        question_id = int(question_id)

        print(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {question}")
        print(f"–†–æ–ª—å (—Å —Ñ—Ä–æ–Ω—Ç–∞): {role}")
        print(f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–æ–ª—å –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ—Ä–æ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –±—ç–∫–µ–Ω–¥–∞
        search_role = ROLE_MAPPING.get(role, "other")  # –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º "other"
        print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–æ–ª–∏: {search_role}")

        # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç question_id
        if question_id == 1:
            prompt_template = '''
            –í—ã –∏—Å–ø–æ–ª–Ω—è–µ—Ç–µ —Ä–æ–ª—å $role, –∞ –≤–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî $specialization.

            –ü—Ä–æ–º–ø—Ç:
            –¢—ã ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é –º–µ–∂–¥—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (PO) –∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ (PM). –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –¥–∞—Ç—å —á–µ—Ç–∫–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: "–ß—Ç–æ —è –º–æ–≥—É –æ–∂–∏–¥–∞—Ç—å –æ—Ç —Å–≤–æ–µ–≥–æ PO/PM?", –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
            –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏:
            –£–∑–Ω–∞–π —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫), —á—Ç–æ–±—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.

            –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
            –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ PO/PM: –û–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Product Owner (PO) –∏ Project Manager (PM), –∏—Ö –∑–æ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.
            –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º: –†–∞–∑—ä—è—Å–Ω–∏, –∫–∞–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–æ–∂–Ω–æ –æ–∂–∏–¥–∞—Ç—å –æ—Ç PO/PM –≤ —Ä–∞–±–æ—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á, –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π.
            –û–∂–∏–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:

            –î–ª—è Junior: PO/PM –ø–æ–º–æ–≥–∞–µ—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ–∑–∞—Ü–∏–µ–π, –æ–±—É—á–µ–Ω–∏–µ–º, —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.
            –î–ª—è Middle: PO/PM –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ, –∞ —Å–∞–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∏–∑–Ω–µ—Å-—Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–∞–º.
            –î–ª—è Senior: PO/PM –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π/–ø—Ä–æ–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
            –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
            –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏: –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ PO/PM, –ö–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º, –û–∂–∏–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è.
            –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π, –≥–¥–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å PO/PM –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å.
            –¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—Å–∏—Ç—å 4096 —Å–∏–º–≤–æ–ª–æ–≤.
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            –í–æ–ø—Ä–æ—Å: {input}
            –û—Ç–≤–µ—Ç:
            '''
        elif question_id == 2:
            prompt_template = '''
            –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:

            '–ß—Ç–æ —è –º–æ–≥—É –æ–∂–∏–¥–∞—Ç—å –æ—Ç —Å–≤–æ–µ–≥–æ –ª–∏–¥–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏?'

            –ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ —É—á—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

            –†–æ–ª—å: $role
            –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: $specialization
            –¢–∏–ø–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã.
            –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª–∏–¥–µ—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
            –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª–Ω—è—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
            –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,
            –¥–∞–π –∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
            –¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—Å–∏—Ç—å 4096 —Å–∏–º–≤–æ–ª–æ–≤.

            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            –í–æ–ø—Ä–æ—Å: {input}
            –û—Ç–≤–µ—Ç:
            '''
        elif question_id == 3:
            prompt_template = '''
            –í—ã –∏—Å–ø–æ–ª–Ω—è–µ—Ç–µ —Ä–æ–ª—å $role, –∞ –≤–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî $specialization.

            –¢—ã ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏—é —Ä–æ–ª–µ–π –¥–ª—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.
            –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∞–Ω–∞–ª–∏–∑–æ–º –º–∞—Ç—Ä–∏—Ü—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π Junior, Junior+/Middle-, Middle+ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ soft skills (—Å–æ—Ñ—Ç—ã) –∏ hard skills (—Ö–∞—Ä–¥—ã) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è.
            –ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.

            –ü—Ä–∏–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:

            –£—Ä–æ–≤–µ–Ω—å Junior
            –°–æ—Ñ—Ç—ã:
            ...
            ...
            –•–∞—Ä–¥—ã:
            ...
            ...
            –£—Ä–æ–≤–µ–Ω—å Junior+/Middle-
            –°–æ—Ñ—Ç—ã:
            ...
            ...
            –•–∞—Ä–¥—ã:
            ...
            ...
            –ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Ä–æ–≤–Ω–µ–π.

            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            –í–æ–ø—Ä–æ—Å: {input}
            –û—Ç–≤–µ—Ç:
            '''
        elif question_id == 777:
            prompt_template = '''
            –í—ã –∏—Å–ø–æ–ª–Ω—è–µ—Ç–µ —Ä–æ–ª—å $role, –∞ –≤–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî $specialization.
            –í–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç:

            –†–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å $specialization, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
            –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ä–∞–º–∫–∞—Ö $role.
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–æ–º–æ—â—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ $specialization –∏ $role.
            –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, \
            –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–µ–ª—è—è –≤–Ω–∏–º–∞–Ω–∏–µ –µ–≥–æ —Ä–æ–ª–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. \
            –ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, \
            –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
            –¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—Å–∏—Ç—å 4096 —Å–∏–º–≤–æ–ª–æ–≤.

            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            –í–æ–ø—Ä–æ—Å: {input}
            –û—Ç–≤–µ—Ç:
            '''
        else:
            await websocket.send_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π question_id.")
            await websocket.close()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏
        if search_role in role_to_index:
            embedding_retriever = role_to_index[search_role].as_retriever(search_kwargs={"k": 5})
        else:
            await websocket.send_text("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await websocket.close()
            return

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        retrieval_chain = create_retrieval_chain_from_folder(search_role, specialization, prompt_template, embedding_retriever)

        # –ó–∞–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        unwanted_chars = ["*", "**"]
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
        async for chunk in retrieval_chain.astream({'input': question}):
            if chunk:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
                answer = chunk.get("answer", "").strip()

                # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                for char in unwanted_chars:
                    answer = answer.replace(char, " ")

                answer = " ".join(answer.split())  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

                await websocket.send_text(answer)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await websocket.send_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        await websocket.close()
    
if __name__ == "__main__":
    import uvicorn
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ ws://127.0.0.1:8000/ws")
    uvicorn.run(app, host="0.0.0.0", port=8000)