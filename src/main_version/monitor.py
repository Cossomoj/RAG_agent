"""
–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
–≤–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU, RAM, –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    - –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∏
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Python 3.6+
    - –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º
    - –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ALERT_BOT_TOKEN
    - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: psutil, telebot, matplotlib

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    $ python monitor.py
"""

import os
import psutil
import telebot
import logging
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import matplotlib.pyplot as plt

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ALERT_BOT_TOKEN = os.getenv("ALERT_BOT_TOKEN")
bot = telebot.TeleBot(ALERT_BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="monitor.log",
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(message)s",
)


# –§—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def get_uptime():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤ —á–∞—Å–∞—Ö.
            –ü—Ä–∏–º–µ—Ä: 'üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: 23.50 —á–∞—Å–∞'

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ /proc/uptime
    """
    try:
        with open("/proc/uptime", "r") as f:
            uptime_seconds = float(f.readline().split()[0])
            uptime_hours = uptime_seconds / 3600
            return f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: {uptime_hours:.2f} —á–∞—Å–æ–≤"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è uptime: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è uptime: {e}"


def get_cpu_load():
    """
    –ò–∑–º–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ CPU.
            –ü—Ä–∏–º–µ—Ä: 'üî• –ó–∞–≥—Ä—É–∑–∫–∞ CPU: 45.2%'

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ psutil
    """
    try:
        cpu_load = psutil.cpu_percent(interval=1)
        return f"üî• –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_load}%"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CPU: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CPU: {e}"


def get_ram_usage():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ RAM.
            –ü—Ä–∏–º–µ—Ä: 'üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: 4.20 –ì–ë / 16.00 –ì–ë (26.25%)'

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ psutil
    """
    try:
        mem = psutil.virtual_memory()
        return f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {mem.used / (1024**3):.2f} –ì–ë / {mem.total / (1024**3):.2f} –ì–ë ({mem.percent}%)"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RAM: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RAM: {e}"


def get_disk_usage():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –Ω–∞ –¥–∏—Å–∫–µ.
            –ü—Ä–∏–º–µ—Ä: 'üìÄ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –¥–∏—Å–∫–µ: 100.50 –ì–ë –∏–∑ 500.00 –ì–ë (79.90% –∑–∞–Ω—è—Ç–æ)'

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ psutil
    """
    try:
        disk = psutil.disk_usage("/")
        return f"üìÄ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –¥–∏—Å–∫–µ: {disk.free / (1024**3):.2f} –ì–ë –∏–∑ {disk.total / (1024**3):.2f} –ì–ë ({disk.percent}% –∑–∞–Ω—è—Ç–æ)"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}"


def get_active_connections():
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
            –ü—Ä–∏–º–µ—Ä: 'üåê –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: 42'

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ psutil
    """
    try:
        connections = len(psutil.net_connections(kind="inet"))
        return f"üåê –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {connections}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}"


def generate_graph():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CPU –∏ RAM.

    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É CPU –∏ RAM
    –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö. –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ñ–∞–π–ª 'system_graph.png'.

    Returns:
        str | None: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    """
    try:
        cpu_load = psutil.cpu_percent(interval=1)
        ram_usage = psutil.virtual_memory().percent

        labels = ["CPU Load", "RAM Usage"]
        values = [cpu_load, ram_usage]

        plt.figure(figsize=(5, 3))
        plt.bar(labels, values, color=["red", "blue"])
        plt.ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç (%)")
        plt.title("–ó–∞–≥—Ä—É–∑–∫–∞ CPU –∏ RAM")
        plt.ylim(0, 100)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        graph_path = "system_graph.png"
        plt.savefig(graph_path)
        plt.close()
        return graph_path
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None


@bot.message_handler(commands=["start"])
def send_welcome(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è Telegram –±–æ—Ç–∞.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è
    –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /status.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    """
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    status_button = KeyboardButton("/status")
    markup.add(status_button)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å.",
        reply_markup=markup,
    )


@bot.message_handler(commands=["status"])
def send_status(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è Telegram –±–æ—Ç–∞.

    –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –≤–º–µ—Å—Ç–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ CPU –∏ RAM.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    """
    report = "\n".join(
        [
            get_uptime(),
            get_cpu_load(),
            get_ram_usage(),
            get_disk_usage(),
            get_active_connections(),
        ]
    )

    bot.send_message(
        message.chat.id, f"üìä *–°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å:*\n\n{report}", parse_mode="Markdown"
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    graph_path = generate_graph()
    if graph_path:
        with open(graph_path, "rb") as photo:
            bot.send_photo(message.chat.id, photo)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.infinity_polling()
