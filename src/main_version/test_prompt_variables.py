"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö {input} –∏ {context} –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö
"""
import asyncio
import websockets

async def test_prompt_variables():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ {input} –∏ {context}"""
    
    test_cases = [
        {
            "name": "–ü—Ä–æ–º–ø—Ç 3 - –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π (—Å {input} –∏ {context})",
            "prompt_id": 3,
            "question": "–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π",
            "role": "–ê–Ω–∞–ª–∏—Ç–∏–∫", 
            "specialization": "–ë–∏–∑–Ω–µ—Å–ê–Ω–∞–ª–∏—Ç–∏–∫",
            "expected_behavior": "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ {input} –∏ {context}"
        },
        {
            "name": "–ü—Ä–æ–º–ø—Ç 777 - –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (—Å {input} –∏ {context})",
            "prompt_id": 777,
            "question": "–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –∫–∞—Ä—å–µ—Ä–µ?",
            "role": "Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "specialization": "Backend",
            "expected_behavior": "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ {input} –∏ {context}"
        },
        {
            "name": "–ü—Ä–æ–º–ø—Ç 888 - –°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ (—Å {input} –∏ {context})",
            "prompt_id": 888,
            "question": "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
            "role": "–õ–∏–¥",
            "specialization": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π",
            "expected_behavior": "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ {input} –∏ {context}"
        }
    ]
    
    uri = "ws://localhost:8000/ws"
    
    for test_case in test_cases:
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢: {test_case['name']}")
        print(f"üìù –í–æ–ø—Ä–æ—Å: {test_case['question']}")
        print(f"üë§ –†–æ–ª—å: {test_case['role']}")
        print(f"üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {test_case['specialization']}")
        print(f"üîß –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: {test_case['expected_behavior']}")
        print(f"{'='*60}")
        
        try:
            async with websockets.connect(uri) as websocket:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await websocket.send(test_case['question'])
                await websocket.send(test_case['role'])
                await websocket.send(test_case['specialization'])
                await websocket.send(str(test_case['prompt_id']))
                await websocket.send("[]")  # context
                await websocket.send("1")   # count
                await websocket.send("by_specialization")  # vector_store
                
                print("üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...")
                
                # –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
                response_parts = []
                try:
                    for i in range(5):  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —á–∞—Å—Ç–µ–π
                        response = await asyncio.wait_for(websocket.recv(), timeout=10.0)
                        if response:
                            response_parts.append(response)
                            print(f"üì• –ß–∞—Å—Ç—å {i+1}: {response[:100]}...")
                        else:
                            break
                except asyncio.TimeoutError:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
                
                if response_parts:
                    full_response = "".join(response_parts)
                    print(f"\nüìÑ –ù–ê–ß–ê–õ–û –û–¢–í–ï–¢–ê ({len(full_response)} —Å–∏–º–≤–æ–ª–æ–≤):")
                    print("-" * 40)
                    print(full_response[:500])
                    print("-" * 40)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
                    quality_indicators = [
                        "–º–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", "junior", "middle", "senior", "lead",
                        "–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è", "–Ω–∞–≤—ã–∫", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–∫–∞—Ä—å–µ—Ä–∞"
                    ]
                    
                    found_indicators = []
                    for indicator in quality_indicators:
                        if indicator.lower() in full_response.lower():
                            found_indicators.append(indicator)
                    
                    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:")
                    print(f"–ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {found_indicators}")
                    print(f"–ö–∞—á–µ—Å—Ç–≤–æ: {'‚úÖ –•–û–†–û–®–ï–ï' if len(found_indicators) > 2 else '‚ö†Ô∏è –°–†–ï–î–ù–ï–ï' if len(found_indicators) > 0 else '‚ùå –ù–ò–ó–ö–û–ï'}")
                else:
                    print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω!")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–• –í –ü–†–û–ú–ü–¢–ê–•")
    print("=" * 60)
    asyncio.run(test_prompt_variables())
    print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û") 