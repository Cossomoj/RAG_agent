import asyncio
import websockets
import json

async def test_prompt_with_rag_indicators(prompt_id, question, role, specialization, context="[]", expected_rag=True):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ RAG –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    """
    uri = "ws://localhost:8000/ws"
    
    try:
        async with websockets.connect(uri) as websocket:
            print(f"\n=== –¢–ï–°–¢ –ü–†–û–ú–ü–¢–ê {prompt_id} ===")
            print(f"–í–æ–ø—Ä–æ—Å: {question}")
            print(f"–†–æ–ª—å: {role}")
            print(f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}")
            print(f"–û–∂–∏–¥–∞–µ—Ç—Å—è RAG: {'–î–ê' if expected_rag else '–ù–ï–¢'}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await websocket.send(question)
            await websocket.send(role)
            await websocket.send(specialization)
            await websocket.send(str(prompt_id))
            await websocket.send(context)
            await websocket.send("1")
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç
            response_chunks = []
            try:
                while True:
                    response = await asyncio.wait_for(websocket.recv(), timeout=20.0)
                    response_chunks.append(response)
                    if len(response_chunks) > 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ chunks
                        break
            except (asyncio.TimeoutError, websockets.exceptions.ConnectionClosed):
                pass
            
            if response_chunks:
                full_response = "".join(response_chunks)
                print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ({len(full_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAG (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
                rag_indicators = [
                    "–º–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", "junior", "middle", "senior", "lead",
                    "—Å–æ—Ñ—Ç-—Å–∫–∏–ª–ª—ã", "—Ö–∞—Ä–¥-—Å–∫–∏–ª–ª—ã", "–≥—Ä–µ–π–¥", "–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è", "–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π",
                    "–Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", "–æ–Ω–±–æ—Ä–¥–∏–Ω–≥", "1-2-1", "–∏–ø—Ä", "–º–µ–Ω—Ç–æ—Ä–∏–Ω–≥",
                    "backlog", "roadmap", "—Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä", "po", "pm",
                    "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å", "–º–æ–Ω–æ–ª–∏—Ç", "–æ—Ü–µ–Ω–∫–∞", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
                ]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ RAG
                found_indicators = []
                for indicator in rag_indicators:
                    if indicator.lower() in full_response.lower():
                        found_indicators.append(indicator)
                
                uses_rag = len(found_indicators) > 0
                
                print(f"–ù–∞–π–¥–µ–Ω—ã RAG –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {found_indicators}")
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç RAG: {'‚úÖ –î–ê' if uses_rag else '‚ùå –ù–ï–¢'}")
                print(f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º: {'‚úÖ' if uses_rag == expected_rag else '‚ùå'}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
                print(f"–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {full_response[:300]}...")
                
                return uses_rag
            else:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω!")
                return False
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

async def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ 777 –∏ 888"""
    
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG –î–õ–Ø –ü–†–û–ú–ü–¢–û–í 777 –ò 888")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–º–ø—Ç 777 —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG)
    result1 = await test_prompt_with_rag_indicators(
        prompt_id=777,
        question="–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –∫–∞—Ä—å–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞?",
        role="Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        specialization="Backend",
        expected_rag=True
    )
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–º–ø—Ç 777 —Å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º (–ù–ï –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG)
    result2 = await test_prompt_with_rag_indicators(
        prompt_id=777,
        question="–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞?",
        role="Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", 
        specialization="Backend",
        expected_rag=False
    )
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–º–ø—Ç 888 —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG)
    result3 = await test_prompt_with_rag_indicators(
        prompt_id=888,
        question="–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–∞–≤—ã–∫–∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞",
        role="–õ–∏–¥",
        specialization="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π",
        context='[{"role": "user", "content": "–ú—ã –≥–æ–≤–æ—Ä–∏–ª–∏ –ø—Ä–æ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã"}]',
        expected_rag=True
    )
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–º–ø—Ç 888 —Å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º (–ù–ï –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG)
    result4 = await test_prompt_with_rag_indicators(
        prompt_id=888,
        question="–†–µ—Ü–µ–ø—Ç –±–æ—Ä—â–∞",
        role="–õ–∏–¥",
        specialization="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π",
        context='[{"role": "user", "content": "–ì–æ–≤–æ—Ä–∏–ª–∏ –æ –µ–¥–µ"}]',
        expected_rag=False
    )
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–º–ø—Ç 777 —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø—Ä–æ –º–∞—Ç—Ä–∏—Ü—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG)
    result5 = await test_prompt_with_rag_indicators(
        prompt_id=777,
        question="–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π?",
        role="–°—Ç–∞–∂–µ—Ä",
        specialization="–ê–Ω–∞–ª–∏—Ç–∏–∫",
        expected_rag=True
    )
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–º–ø—Ç 888 —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø—Ä–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG)
    result6 = await test_prompt_with_rag_indicators(
        prompt_id=888,
        question="–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?",
        role="–õ–∏–¥",
        specialization="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º",
        context='[{"role": "user", "content": "–û–±—Å—É–∂–¥–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞–π–º–∞"}]',
        expected_rag=True
    )
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    tests = [
        ("777 + —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", result1, True),
        ("777 + –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", result2, False), 
        ("888 + —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", result3, True),
        ("888 + –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", result4, False),
        ("777 + –º–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", result5, True),
        ("888 + –æ–Ω–±–æ—Ä–¥–∏–Ω–≥", result6, True)
    ]
    
    passed = 0
    for test_name, actual_result, expected_result in tests:
        status = "‚úÖ –ü–†–û–®–ï–õ" if actual_result == expected_result else "‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø"
        print(f"{test_name}: {status}")
        if actual_result == expected_result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == len(tests):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! RAG —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ 777 –∏ 888")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏.")

if __name__ == "__main__":
    asyncio.run(run_comprehensive_test()) 