
РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: QA Engineer; ТЕМА: Жизненный цикл разработки ПО (SDLC)

# Жизненный цикл разработки ПО (SDLC) для QA тестировщика

## Обзор SDLC

### Определение:
SDLC (Software Development Life Cycle) — это стандартный процесс разработки программного обеспечения, который проходит через определенные этапы от получения требований до развертывания.

### Важность понимания SDLC:
Понимание вашей роли в SDLC критически важно для эффективной работы в команде и качественного выполнения задач тестирования.

### Стандартные этапы SDLC:

#### 1. Получение требований
- **Роль**: Product Owner (PO)
- **Действие**: Предоставление неструктурированных требований
- **Формат**: Диалог, описание потребностей
- **Получатель**: Бизнес-аналитик (БА)

#### 2. Формализация требований
- **Роль**: Бизнес-аналитик (БА)
- **Действие**: Формализация требований в структурированном виде
- **Формат**: User Stories (US), Use Cases (UC), технические задания
- **Получатель**: Архитектор


РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: QA Engineer; ТЕМА: Архитектурное проектирование и системный анализ

## Архитектурное проектирование и системный анализ

#### 3. Архитектурное проектирование
- **Роль**: Архитектор
- **Действие**: Проектирование принципиальных компонентов и паттернов взаимодействия
- **Результат**: Архитектурная документация, диаграммы компонентов
- **Получатель**: Системный аналитик (СА)

#### 4. Системный анализ
- **Роль**: Системный аналитик (СА)
- **Действие**: Переложение бизнес-логики на архитектуру системы
- **Задачи**:
  - Проработка деталей взаимодействия компонентов
  - Детализация логики работы системы
  - Создание технических спецификаций
- **Получатель**: Разработчик

### Роль QA тестировщика в этих этапах:
- **Участие в ревью требований**: Проверка тестируемости требований
- **Консультации по тестируемости**: Рекомендации по улучшению тестируемости
- **Оценка сложности тестирования**: Предоставление оценок времени на тестирование
- **Техническая экспертиза**: Анализ тестируемости архитектурных решений


РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: QA Engineer; ТЕМА: Разработка, тестирование и развертывание

## Разработка, тестирование и развертывание

#### 5. Разработка (Implementation)
- **Роль**: Разработчик
- **Входные артефакты**:
  - Бизнес-аналитика от БА
  - Архитектура от Архитектора
  - Системная аналитика от СА
- **Действие**: Реализация описанных требований в коде
- **Результат**: Рабочий код, документация разработчика
- **Получатель**: QA тестировщик

#### 6. Тестирование
- **Роль**: QA тестировщик
- **Входные артефакты**:
  - Разработанное решение от разработчика
  - Требования от БА и СА
- **Действие**: Проверка соответствия реализованного запроектированному
- **Виды тестирования**:
  - Unit тестирование (выполняется разработчиком)
  - Integration тестирование
  - System тестирование
  - User Acceptance тестирование

#### 7. Развертывание
- **Роль**: DevOps/Администратор
- **Входные артефакты**: Разработанный и протестированный код
- **Действие**: Развертывание на стендах/серверах
- **Задачи**:
  - Настройка инфраструктуры
  - Развертывание приложения
  - Обеспечение работоспособности
  - Мониторинг и поддержка

### Роль QA тестировщика в тестировании:
- **Создание тест-планов**: Планирование стратегии тестирования
- **Написание тест-кейсов**: Создание детальных сценариев тестирования
- **Выполнение тестов**: Проведение ручного и автоматизированного тестирования
- **Баг-репортинг**: Документирование найденных дефектов


РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: QA Engineer; ТЕМА: Взаимодействие в команде и управление артефактами

## Взаимодействие в команде и управление артефактами

### Ключевые принципы взаимодействия:

#### Понимание роли в SDLC:
- **Прямые поставщики артефактов**: Кто предоставляет вам информацию для работы
- **Прямые получатели артефактов**: Кто получает результаты вашей работы
- **Приоритет взаимодействия**: С этими людьми необходимо взаимодействовать больше всего

#### Оценка качества работы:
- **Поставщики артефактов**: Оценивают качество предоставленной информации
- **Получатели артефактов**: Оценивают качество вашей работы
- **Последствия некачественной работы**: Страдают все участники процесса

### Артефакты QA тестировщика:

#### Входные артефакты:
- **От БА**: User Stories, Use Cases, бизнес-требования
- **От Архитектора**: Архитектурная документация, диаграммы
- **От СА**: Технические спецификации, API документация
- **От разработчиков**: Готовые функции и модули

#### Выходные артефакты:
- **Тест-планы**: Стратегии и планы тестирования
- **Тест-кейсы**: Детальные сценарии тестирования
- **Баг-репорты**: Документированные дефекты
- **Тестовые отчеты**: Результаты выполнения тестов

### Качество артефактов:
- **Читаемость тест-кейсов**: Понятность для других тестировщиков
- **Воспроизводимость**: Возможность повторного выполнения тестов
- **Документированность**: Наличие необходимой документации
- **Соответствие стандартам**: Следование принятым в команде стандартам


РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: QA Engineer; ТЕМА: Лучшие практики и непрерывное улучшение

## Лучшие практики и непрерывное улучшение

### Эффективное взаимодействие в SDLC:

#### Коммуникация с командой:
- **Регулярные встречи**: Участие в daily, планировании, ретроспективах
- **Прозрачность**: Информирование о прогрессе и проблемах
- **Обратная связь**: Предоставление конструктивной обратной связи
- **Документирование**: Ведение актуальной тестовой документации

#### Управление качеством:
- **Тест-ревью**: Активное участие в проверке тест-кейсов
- **Автоматизация**: Создание и поддержка автоматизированных тестов
- **Рефакторинг тестов**: Постоянное улучшение качества тестов
- **Мониторинг**: Отслеживание результатов тестирования и метрик

### Непрерывное улучшение процесса:

#### Анализ и оптимизация:
- **Ретроспективы**: Участие в анализе процесса команды
- **Метрики**: Отслеживание ключевых показателей тестирования
- **Обучение**: Постоянное развитие навыков тестирования
- **Инновации**: Внедрение новых практик и инструментов тестирования

#### Инструменты и технологии:
- **Системы управления тестированием**: TestRail, Zephyr, Xray
- **Инструменты автоматизации**: Selenium, Cypress, Playwright
- **Управление проектами**: Jira, Confluence, Trello
- **Мониторинг**: Логи тестов, метрики качества, алерты