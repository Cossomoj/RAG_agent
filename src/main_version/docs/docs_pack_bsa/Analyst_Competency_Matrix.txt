# Матрица компетенций бизнес-системного аналитика (BSA)

## Метаданные документа
- **Тип документа**: Матрица компетенций
- **Теги**: [компетенции, уровни, junior, middle, senior, lead, soft_skills, hard_skills, карьерный_рост]
- **Версия**: 2.0
- **Дата обновления**: 2024

## Оглавление
1. [Уровень Junior](#уровень-junior)
2. [Уровень Junior+/Middle-](#уровень-junior-middle-)
3. [Уровень Middle+](#уровень-middle)
4. [Уровень Senior](#уровень-senior)
5. [Уровень Lead](#уровень-lead)

---

## Уровень Junior

### Soft Skills

#### 1. Желание учиться
**Описание**: Активное стремление к получению новых знаний с применением на практике

**Измеримые критерии**:
- Минимум 2 новых навыка/технологии освоены за последний год
- Применение минимум 1 изученной технологии в текущих проектах
- Ведение личного плана развития с еженедельными обновлениями

**Практический кейс**:
Junior-аналитик Мария за год изучила:
- Нотацию BPMN для моделирования процессов
- Работу с Postman для тестирования API
- Основы SQL для анализа данных

Применение: Использовала BPMN для документирования процесса обработки заказов, что сократило время согласования требований с 5 до 2 дней.

**Практическое задание**:
1. Составьте план изучения новой технологии на квартал
2. Определите 3 способа применения в текущем проекте
3. Создайте мини-проект для демонстрации навыка

#### 2. Проактивная работа с заказчиком
**Описание**: Инициативность в коммуникации и предупреждение проблем

**Измеримые критерии**:
- Минимум 1 инициативное предложение в неделю
- 80% потенциальных проблем выявлены до эскалации
- Время ответа на запросы заказчика не более 4 часов

**Практический кейс**:
Аналитик заметил, что требование заказчика о времени загрузки страницы в 1 секунду технически невыполнимо. Проактивно:
1. Провел анализ текущей производительности
2. Подготовил 3 альтернативных варианта
3. Презентовал заказчику до начала разработки
Результат: Сэкономлено 40 часов разработки

**Практическое задание**:
Проанализируйте текущие требования проекта и найдите минимум 3 потенциальных риска. Для каждого подготовьте план митигации.

#### 3. Умение принимать обратную связь
**Описание**: Конструктивное восприятие критики и использование для развития

**Измеримые критерии**:
- 100% полученной обратной связи зафиксировано письменно
- По 80% критических замечаний составлен план улучшения
- Прогресс по устранению замечаний виден через 2 недели

**Практический кейс**:
После ревью требований получена обратная связь: "Критерии приемки слишком общие". 
Действия:
1. Запросил конкретные примеры
2. Изучил best practices по написанию критериев
3. Переработал все критерии с конкретными метриками
Результат: Количество уточняющих вопросов от QA снизилось на 70%

**Практическое задание**:
Попросите обратную связь у 3 коллег по последней выполненной задаче. Создайте план действий по каждому пункту критики.

#### 4. Многозадачность
**Описание**: Эффективное переключение между 2-5 проектами без потери качества

**Измеримые критерии**:
- Работа минимум на 2 проектах одновременно
- Потеря эффективности при переключении не более 15%
- Все дедлайны соблюдены на 95%

**Практический кейс**:
Аналитик работает на 3 проектах:
- Проект А: 50% времени (основной)
- Проект B: 30% времени (поддержка)
- Проект C: 20% времени (консультации)

Использует технику time-blocking: понедельник и вторник - проект А, среда - проект B, четверг - проект А, пятница - проект C.

**Практическое задание**:
1. Создайте расписание на неделю для работы с 3 задачами
2. Определите оптимальные блоки времени для каждой
3. Отследите фактические затраты времени

### Hard Skills

#### 1. Знание JSON нотации
**Описание**: Понимание структуры JSON и умение работать с данными

**Измеримые критерии**:
- Чтение и понимание JSON структур любой сложности
- Создание валидных JSON схем для API
- Время на анализ JSON ответа не более 5 минут

**Практический кейс**:
```json
{
  "order": {
    "id": 12345,
    "customer": {
      "name": "Иван Иванов",
      "email": "ivan@example.com"
    },
    "items": [
      {
        "product_id": 1,
        "quantity": 2,
        "price": 1000
      }
    ],
    "total": 2000,
    "status": "pending"
  }
}
```
Аналитик должен описать структуру данных для разработчиков и указать обязательные поля.

**Практическое задание**:
1. Создайте JSON схему для системы управления задачами
2. Включите: пользователей, проекты, задачи, комментарии
3. Определите связи между сущностями

#### 2. Знание Postman/Curl
**Описание**: Тестирование API и работа с HTTP запросами

**Измеримые критерии**:
- Создание коллекции из 10+ запросов в Postman
- Написание тестов для проверки ответов
- Отладка API проблем за 15 минут

**Практический кейс**:
Тестирование API регистрации:
```
POST /api/register
{
  "email": "test@example.com",
  "password": "SecurePass123!",
  "name": "Test User"
}

Тесты:
- Статус код 201
- Наличие поля "user_id" в ответе
- Формат email в ответе
```

**Практическое задание**:
1. Создайте Postman коллекцию для тестирования CRUD операций
2. Добавьте переменные окружения
3. Напишите автоматические тесты для каждого запроса

#### 3. Умение использовать User Story и Use Case
**Описание**: Формулирование требований в формате историй и сценариев

**Измеримые критерии**:
- Написание User Story по шаблону за 15 минут
- Покрытие всех сценариев использования на 90%
- Acceptance Criteria для каждой истории

**Практический кейс**:
```
User Story:
Как менеджер интернет-магазина
Я хочу видеть отчет по продажам за период
Чтобы анализировать эффективность маркетинговых кампаний

Acceptance Criteria:
- Выбор периода: день/неделя/месяц/произвольный
- Группировка по категориям товаров
- Экспорт в Excel/PDF
- Время генерации отчета не более 10 секунд
```

**Практическое задание**:
Напишите 5 User Stories для системы бронирования переговорных комнат

#### 4. Понимание клиент-серверного взаимодействия
**Описание**: Знание архитектуры веб-приложений и протоколов

**Измеримые критерии**:
- Объяснение работы HTTP/HTTPS за 5 минут
- Диагностика проблем клиент-сервер за 20 минут
- Чтение и понимание сетевых логов

**Практический кейс**:
Пользователь жалуется на медленную загрузку страницы.
Аналитик:
1. Проверяет Network tab в браузере
2. Находит запрос, который выполняется 5 секунд
3. Определяет, что проблема в неоптимальном SQL запросе
4. Формулирует требование по оптимизации

**Практическое задание**:
1. Нарисуйте схему взаимодействия для процесса авторизации
2. Укажите все HTTP методы и коды ответов
3. Опишите возможные точки отказа

#### 5. Владение инструментами разметки макетов
**Описание**: Создание схем, wireframes и технических диаграмм

**Измеримые критерии**:
- Создание wireframe за 30 минут
- Использование минимум одного профессионального инструмента
- Понятность схем для всех участников команды

**Практический кейс**:
Используя Figma, аналитик создал:
- Wireframe формы регистрации
- User flow для процесса покупки
- Схему состояний заказа

**Практическое задание**:
1. Создайте wireframe для мобильного приложения заказа такси
2. Включите 5 основных экранов
3. Покажите переходы между экранами

---

## Уровень Junior+/Middle-

### Soft Skills
*Наследуются все навыки Junior уровня с повышенными требованиями*

### Hard Skills
*Включают все навыки Junior уровня плюс:*

#### 6. Построение sequence диаграмм в UML нотации
**Описание**: Моделирование взаимодействий между компонентами системы

**Измеримые критерии**:
- Создание sequence диаграммы для процесса из 5+ шагов за 45 минут
- Использование правильной UML нотации
- Покрытие альтернативных сценариев

**Практический кейс**:
```
Процесс оплаты заказа:
1. Клиент -> UI: Нажать "Оплатить"
2. UI -> Backend: POST /api/payment
3. Backend -> PaymentGateway: Запрос на оплату
4. PaymentGateway -> Backend: Результат
5. Backend -> UI: Статус оплаты
6. UI -> Клиент: Показать результат
```

**Практическое задание**:
Создайте sequence диаграмму для процесса восстановления пароля с учетом всех проверок безопасности

#### 7. Умение работать со Swagger/OpenAPI схемами
**Описание**: Документирование и проектирование API

**Измеримые критерии**:
- Чтение и понимание OpenAPI 3.0 спецификаций
- Создание документации для 10+ endpoints
- Валидация схем без ошибок

**Практический кейс**:
```yaml
openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
paths:
  /users:
    get:
      summary: Get all users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
```

**Практическое задание**:
1. Создайте OpenAPI спецификацию для API управления библиотекой
2. Включите CRUD операции для книг и читателей
3. Добавьте схемы данных и примеры

---

## Уровень Middle+

### Soft Skills

#### 4. Умение доносить свои мысли до коллег
**Описание**: Четкая коммуникация технических и бизнес-концепций

**Измеримые критерии**:
- 90% коллег понимают объяснение с первого раза
- Презентации не превышают отведенное время
- Получение оценки 4+ из 5 за ясность изложения

**Практический кейс**:
Аналитик объясняет разработчикам сложную бизнес-логику расчета скидок:
1. Создал визуальную схему с примерами
2. Подготовил таблицу с тест-кейсами
3. Провел воркшоп с Q&A сессией
Результат: 0 вопросов при реализации

**Практическое задание**:
Подготовьте 10-минутную презентацию сложного бизнес-процесса для технической команды

#### 5. Умение объяснить заказчику варианты реализации
**Описание**: Презентация технических решений в понятной форме

**Измеримые критерии**:
- Подготовка 3+ вариантов решения для каждой задачи
- Четкое описание плюсов/минусов каждого варианта
- Помощь в принятии решения за 1 встречу

**Практический кейс**:
Заказчик хочет real-time обновления данных.
Варианты:
1. WebSockets: мгновенные обновления, сложность $$$
2. Long Polling: почти real-time, средняя сложность $$
3. Периодические запросы: задержка 5-10 сек, просто $

**Практическое задание**:
Подготовьте сравнение 3 вариантов реализации системы нотификаций

#### 7. Умение выявить недостаток знаний
**Описание**: Самооценка компетенций и планирование развития

**Измеримые критерии**:
- Ежеквартальная оценка своих компетенций
- План развития на 3-6 месяцев
- Закрытие 80% выявленных пробелов

**Практический кейс**:
При работе над финтех проектом аналитик выявил недостаток знаний в области compliance. 
План действий:
1. Прошел курс по финансовому регулированию
2. Изучил требования ЦБ РФ
3. Провел консультацию с юристами
Результат: Самостоятельно формирует требования по compliance

**Практическое задание**:
1. Проведите самооценку по 10 ключевым компетенциям аналитика
2. Выявите 3 области для развития
3. Составьте план обучения на квартал

### Hard Skills

#### 8. Понимание синхронного и асинхронного взаимодействия
**Описание**: Проектирование систем с учетом типов взаимодействия

**Измеримые критерии**:
- Правильный выбор типа взаимодействия в 90% случаев
- Объяснение разницы за 10 минут
- Проектирование асинхронных процессов

**Практический кейс**:
Синхронно: Проверка баланса карты при оплате
Асинхронно: Генерация отчета на 1 млн записей
Аналитик спроектировал систему, где:
- Критичные операции - синхронно
- Тяжелые операции - через очередь
- Уведомления - через websocket

**Практическое задание**:
Спроектируйте систему обработки видео с учетом асинхронности

#### 9. Опыт работы с очередями (RabbitMQ, Kafka)
**Описание**: Проектирование event-driven архитектуры

**Измеримые критерии**:
- Проектирование системы с 5+ типами событий
- Выбор правильного брокера сообщений
- Обработка 100k+ сообщений в час

**Практический кейс**:
E-commerce платформа:
- Order.Created -> Inventory Service (резерв товара)
- Order.Paid -> Shipping Service (отправка)
- Order.Shipped -> Notification Service (email)
Используется Kafka для гарантии доставки

**Практическое задание**:
1. Спроектируйте event-driven систему для банка
2. Определите основные события и подписчиков
3. Выберите технологию и обоснуйте

#### 10. Понимание микросервисов vs монолит
**Описание**: Выбор архитектурного подхода

**Измеримые критерии**:
- Обоснованный выбор архитектуры
- Учет 5+ факторов при выборе
- Оценка TCO для каждого подхода

**Практический кейс**:
Стартап выбирает архитектуру:
Монолит подходит, потому что:
- Команда 5 человек
- MVP нужен через 3 месяца
- Неясны границы доменов
План: начать с модульного монолита, подготовиться к разделению

**Практическое задание**:
Проанализируйте существующий монолит и предложите план миграции на микросервисы

#### 11. Понимание stateless и stateful сервисов
**Описание**: Проектирование с учетом управления состоянием

**Измеримые критерии**:
- Правильная классификация сервисов в 95% случаев
- Проектирование масштабируемых stateless сервисов
- Корректная работа с состоянием

**Практический кейс**:
Stateless: REST API для CRUD операций
Stateful: WebSocket сервер для чата
Решение: Вынести состояние чата в Redis, сделать WebSocket сервер stateless

**Практическое задание**:
Переработайте stateful сервис корзины покупок в stateless

#### 12. Понимание подхода API First
**Описание**: Проектирование систем с приоритетом API

**Измеримые критерии**:
- API спецификация готова до начала разработки
- Контракты согласованы всеми сторонами
- Параллельная разработка frontend/backend

**Практический кейс**:
1. Аналитик создал OpenAPI спецификацию
2. Frontend начал разработку с mock-сервером
3. Backend реализует согласно спецификации
4. Интеграция прошла без проблем

**Практическое задание**:
Создайте API First проект для мобильного приложения

#### 13. Опыт работы с Charles
**Описание**: Отладка клиент-серверного взаимодействия

**Измеримые критерии**:
- Настройка прокси за 5 минут
- Анализ HTTPS трафика
- Модификация запросов/ответов для тестирования

**Практический кейс**:
Мобильное приложение не показывает данные.
Charles показал:
- Сервер отвечает 200 OK
- Но в JSON есть лишняя запятая
- Приложение не может распарсить
Быстрый фикс через rewrite rule

**Практическое задание**:
Используя Charles, найдите и исправьте 3 проблемы в API

#### 14. Опыт работы с базами данных
**Описание**: Проектирование структур данных и написание запросов

**Измеримые критерии**:
- Нормализация до 3НФ
- SQL запросы с 3+ JOIN
- Выбор между SQL/NoSQL обоснован

**Практический кейс**:
```sql
-- Аналитик написал запрос для отчета
SELECT 
    c.name as customer,
    COUNT(o.id) as order_count,
    SUM(o.total) as total_spent
FROM customers c
LEFT JOIN orders o ON c.id = o.customer_id
WHERE o.created_at >= '2024-01-01'
GROUP BY c.id
HAVING SUM(o.total) > 10000
ORDER BY total_spent DESC;
```

**Практическое задание**:
1. Спроектируйте схему БД для системы управления проектами
2. Напишите 5 аналитических запросов
3. Обоснуйте выбор SQL vs NoSQL

#### 15. Умение программировать на Python/JavaScript
**Описание**: Автоматизация задач и создание прототипов

**Измеримые критерии**:
- Скрипты для обработки данных 100+ строк
- REST API с 5+ endpoints
- Автоматизация рутинных задач

**Практический кейс**:
```python
# Скрипт для валидации требований
import json
import requests

def validate_api_spec(spec_url):
    spec = requests.get(spec_url).json()
    errors = []
    
    for path, methods in spec['paths'].items():
        for method, details in methods.items():
            if 'responses' not in details:
                errors.append(f"{method} {path}: отсутствуют responses")
            if 'parameters' not in details and method != 'get':
                errors.append(f"{method} {path}: отсутствуют parameters")
    
    return errors
```

**Практическое задание**:
Напишите скрипт для автоматической генерации тестовых данных

#### 16. Понимание принципов работы LLM
**Описание**: Использование AI для аналитических задач

**Измеримые критерии**:
- Формулирование промптов для получения нужного результата
- Понимание ограничений LLM
- Интеграция LLM в рабочие процессы

**Практический кейс**:
Аналитик использует ChatGPT для:
1. Генерации тестовых данных
2. Первичного анализа требований
3. Создания шаблонов документации
Экономия времени: 30%

**Практическое задание**:
1. Создайте промпт для анализа пользовательских отзывов
2. Интегрируйте LLM в процесс создания User Stories
3. Оцените качество результатов

---

## Уровень Senior

### Soft Skills

#### 8. Понимание влияния работы на проект
**Описание**: Стратегическое мышление и приоритизация

**Измеримые критерии**:
- 95% задач правильно приоритизированы
- Сокращение scope при необходимости
- ROI анализ для каждой крупной задачи

**Практический кейс**:
Проект отстает на 2 недели. Senior аналитик:
1. Проанализировал все требования по важности
2. Выделил MVP функциональность (60%)
3. Перенес nice-to-have в следующий релиз (40%)
Результат: Запуск вовремя с ключевыми функциями

**Практическое задание**:
Возьмите проект на 6 месяцев и сократите его до 3 месяцев, сохранив 80% ценности

#### 9. Умение сглаживать напряжение в команде
**Описание**: Управление конфликтами и мотивация команды

**Измеримые критерии**:
- Разрешение 90% конфликтов без эскалации
- Повышение team health score на 20%
- Снижение текучести кадров на 30%

**Практический кейс**:
Конфликт: Разработчики хотят рефакторинг, бизнес - новые фичи.
Решение:
1. Организовал воркшоп по техдолгу
2. Показал влияние техдолга на скорость
3. Договорился о 20% времени на рефакторинг
Результат: Обе стороны довольны

**Практическое задание**:
Разработайте план разрешения конфликта между QA и разработкой

### Hard Skills

#### 17. Умение построить архитектуру проекта
**Описание**: Проектирование масштабируемых систем

**Измеримые критерии**:
- Архитектура выдерживает 10x рост нагрузки
- Время на добавление новой функции < 1 спринта
- Документация архитектуры на 3 уровнях (C4)

**Практический кейс**:
Маркетплейс на 1 млн товаров:
- Микросервисы: каталог, заказы, платежи, доставка
- API Gateway для единой точки входа
- Event-driven для слабой связанности
- CQRS для разделения чтения/записи

**Практическое задание**:
Спроектируйте архитектуру для банковского приложения с учетом регуляторных требований

#### 18. Понимание взаимодействия микросервисов
**Описание**: Проектирование распределенных систем

**Измеримые критерии**:
- Проектирование системы из 10+ микросервисов
- SLA 99.9% для критичных сервисов
- Обработка сбоев без потери данных

**Практический кейс**:
Паттерны взаимодействия:
- Синхронно: REST для запросов данных
- Асинхронно: Kafka для событий
- Service Mesh: Istio для управления трафиком
- Circuit Breaker для отказоустойчивости

**Практическое задание**:
1. Нарисуйте схему взаимодействия для e-commerce
2. Определите протоколы и форматы данных
3. Спроектируйте обработку сбоев

#### 19. Понимание Docker и Kubernetes
**Описание**: Контейнеризация и оркестрация

**Измеримые критерии**:
- Написание Dockerfile для 5+ сервисов
- Создание Kubernetes манифестов
- Настройка CI/CD pipeline

**Практический кейс**:
```yaml
# Kubernetes deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: myapp/user-service:1.0
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
```

**Практическое задание**:
1. Контейнеризируйте микросервисное приложение
2. Напишите Kubernetes манифесты для деплоя
3. Настройте автомасштабирование

---

## Уровень Lead

### Soft Skills

#### 10. Наставничество
**Описание**: Развитие других специалистов

**Измеримые критерии**:
- Менторинг 3+ junior/middle специалистов
- 80% подопечных повысили уровень за год
- Создание базы знаний из 50+ статей

**Практический кейс**:
План развития junior аналитика:
1. Месяц 1-2: Основы требований и UML
2. Месяц 3-4: API и интеграции
3. Месяц 5-6: Архитектурные паттерны
Результат: Повышение до middle за 6 месяцев

**Практическое задание**:
Создайте программу менторинга для аналитиков на год

#### 11. Умение давать нетравматичную обратную связь
**Описание**: Конструктивная критика для развития

**Измеримые критерии**:
- 100% обратной связи принимается позитивно
- Использование фреймворка SBI
- Улучшение производительности на 30%

**Практический кейс**:
Фидбек по требованиям:
"В требованиях к отчету (Ситуация) отсутствовали критерии производительности (Поведение), что привело к проблемам на проде (Влияние). Давай добавим чек-лист для нефункциональных требований."

**Практическое задание**:
Подготовьте обратную связь для 3 разных ситуаций используя SBI

#### 12. Проведение one-to-one встреч
**Описание**: Регулярные встречи для развития сотрудников

**Измеримые критерии**:
- Еженедельные встречи по 30 минут
- Документирование договоренностей
- Tracking прогресса по целям

**Практический кейс**:
Структура one-to-one:
1. Check-in: Как дела? (5 мин)
2. Прогресс по целям (10 мин)
3. Challenges и поддержка (10 мин)
4. Развитие и карьера (5 мин)

**Практическое задание**:
Проведите серию из 4 one-to-one встреч и задокументируйте результаты

### Hard Skills
*Lead уровень включает все Hard Skills уровня Senior с фокусом на:*
- Принятие архитектурных решений
- Установление стандартов и практик
- Техническое лидерство
- Стратегическое планирование технологий

---

## Приложение: Практические задания для самопроверки

### Junior Level Challenge
Создайте полный набор требований для системы бронирования переговорных комнат:
- 10 User Stories
- API спецификация (10 endpoints)
- Wireframes основных экранов
- Тестовые сценарии

### Middle Level Challenge
Спроектируйте систему электронного документооборота:
- Архитектурная схема
- Выбор технологий с обоснованием
- Интеграция с внешними системами
- План миграции с legacy системы

### Senior Level Challenge
Проведите архитектурный редизайн существующего монолита:
- Анализ текущей архитектуры
- Декомпозиция на микросервисы
- План поэтапной миграции
- Оценка рисков и ROI

### Lead Level Challenge
Создайте стратегию развития аналитической компетенции в компании:
- Матрица компетенций и уровней
- Программа обучения и развития
- Метрики эффективности
- План на 2 года

---

## Метрики для оценки прогресса

### Количественные метрики
- Время выполнения типовых задач
- Количество итераций на согласование требований
- Процент требований, принятых без изменений
- Количество найденных проблем на ранних этапах

### Качественные метрики
- Обратная связь от команды
- Сложность решаемых задач
- Уровень самостоятельности
- Вклад в развитие процессов

### Чек-лист для перехода на следующий уровень
- [ ] Выполнены все измеримые критерии текущего уровня
- [ ] Освоены 80% навыков следующего уровня
- [ ] Есть практические кейсы применения навыков
- [ ] Получена позитивная обратная связь от команды
- [ ] Готовность к новым вызовам и ответственности 