
РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: Analyst; ТЕМА: Основы системных требований

# Написание системных требований для специалиста-аналитика

## Введение в системные требования

### Определение системных требований:
Системные требования — это детальное описание того, что система должна делать и как она должна работать, включая функциональные и нефункциональные характеристики.

### Ключевые характеристики:
- **Детализированные**: Конкретное описание функций и характеристик
- **Технические**: Описание технических аспектов системы
- **Измеримые**: Возможность проверки выполнения
- **Тестируемые**: Возможность создания тестов
- **Однозначные**: Отсутствие двусмысленностей

### Роль аналитика в создании системных требований:
- **Переводчик**: Преобразование бизнес-требований в технические
- **Детализатор**: Углубление и конкретизация требований
- **Координатор**: Согласование с техническими специалистами
- **Валидатор**: Проверка корректности требований

### Иерархия требований:
1. **Бизнес-требования**: Высокоуровневые цели организации
2. **Системные требования**: Детальные требования к системе
3. **Пользовательские требования**: Требования с точки зрения пользователей
4. **Функциональные требования**: Что система должна делать
5. **Нефункциональные требования**: Как система должна работать

### Связь с бизнес-требованиями:
- **Трассируемость**: Каждое системное требование должно быть связано с бизнес-требованием
- **Детализация**: Системные требования детализируют бизнес-требования
- **Проверяемость**: Системные требования должны быть проверяемыми
- **Реализуемость**: Системные требования должны быть реализуемыми


РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: Analyst; ТЕМА: Функциональные требования

## Функциональные требования

### Определение функциональных требований:
Функциональные требования описывают, что система должна делать — конкретные функции, возможности и поведение системы.

### Структура функционального требования:
```
ID: FR-001
Название: [Краткое описание функции]
Описание: [Подробное описание]
Приоритет: [Важность требования]
Источник: [Связанное бизнес-требование]
Критерии приемки: [Как проверить выполнение]
Зависимости: [Связанные требования]
```

### Пример функционального требования:
```
ID: FR-001
Название: Регистрация нового пользователя
Описание: Система должна позволять пользователям регистрироваться, вводя email, пароль и подтверждая email
Приоритет: Высокий
Источник: BR-001 (Увеличение базы пользователей)
Критерии приемки: 
- Пользователь может ввести email и пароль
- Система отправляет подтверждение на email
- Аккаунт активируется после подтверждения
Зависимости: FR-002 (Аутентификация пользователей)
```

### Сценарии использования (Use Cases)

#### Структура сценария использования:
```
Название: [Действие пользователя]
Актор: [Кто выполняет действие]
Предусловия: [Что должно быть выполнено до]
Основной поток: [Пошаговое описание]
Альтернативные потоки: [Варианты выполнения]
Постусловия: [Результат выполнения]
```

#### Пример сценария использования:
```
Название: Создание заказа
Актор: Клиент
Предусловия: Пользователь авторизован в системе
Основной поток:
1. Пользователь выбирает товары
2. Система показывает корзину
3. Пользователь подтверждает заказ
4. Система создает заказ
5. Система отправляет подтверждение
Альтернативные потоки:
- Товар недоступен: система уведомляет об этом
- Недостаточно средств: система предлагает другие способы оплаты
Постусловия: Заказ создан и сохранен в системе
```

### Пользовательские истории (User Stories)

#### Формат пользовательской истории:
```
Как [роль пользователя]
Я хочу [желаемая функция]
Чтобы [бизнес-ценность]
```

#### Примеры пользовательских историй:
- **Как клиент**, я хочу **видеть статус заказа**, чтобы **знать, когда он будет доставлен**
- **Как менеджер**, я хочу **получать отчеты по продажам**, чтобы **анализировать эффективность**
- **Как администратор**, я хочу **управлять пользователями**, чтобы **обеспечить безопасность системы**

#### Критерии приемки для пользовательских историй:
- **Независимые**: История может быть реализована отдельно
- **Переговоры**: Возможность обсуждения деталей
- **Ценные**: Приносят ценность пользователю
- **Оцениваемые**: Можно оценить размер и сложность
- **Маленькие**: Реализуются за короткое время
- **Тестируемые**: Можно создать тесты

### Бизнес-процессы

#### Описание бизнес-процессов:
- **Диаграммы процессов**: Визуальное представление
- **Описание шагов**: Текстовое описание
- **Правила бизнеса**: Логика принятия решений
- **Исключения**: Обработка ошибок

#### Инструменты моделирования:
- **BPMN (Business Process Model and Notation)**: Стандарт для моделирования процессов
- **UML Activity Diagrams**: Диаграммы активности
- **Flowcharts**: Блок-схемы
- **Swimlane Diagrams**: Диаграммы с разделением ролей


РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: Analyst; ТЕМА: Нефункциональные требования

## Нефункциональные требования

### Определение нефункциональных требований:
Нефункциональные требования описывают, как система должна работать — характеристики качества, ограничения и атрибуты системы.

### Категории нефункциональных требований:

#### Производительность (Performance):
- **Время отклика**: Время ответа системы
- **Пропускная способность**: Количество операций в единицу времени
- **Масштабируемость**: Возможность увеличения нагрузки
- **Эффективность**: Использование ресурсов

#### Примеры требований производительности:
```
ID: NFR-001
Категория: Производительность
Описание: Время загрузки страницы не должно превышать 3 секунды
Критерии: 95% страниц загружаются за 3 секунды при скорости интернета 1 Мбит/с
Приоритет: Высокий
```

#### Безопасность (Security):
- **Аутентификация**: Подтверждение личности пользователя
- **Авторизация**: Контроль доступа к ресурсам
- **Конфиденциальность**: Защита данных
- **Целостность**: Сохранность данных
- **Доступность**: Защита от отказов

#### Примеры требований безопасности:
```
ID: NFR-002
Категория: Безопасность
Описание: Все пароли должны быть зашифрованы
Критерии: Использование алгоритма bcrypt с солью
Приоритет: Критический
```

#### Удобство использования (Usability):
- **Простота обучения**: Легкость освоения системы
- **Эффективность использования**: Скорость выполнения задач
- **Запоминаемость**: Легкость возврата к использованию
- **Ошибки**: Минимизация ошибок пользователей
- **Удовлетворенность**: Приятность использования

#### Примеры требований удобства использования:
```
ID: NFR-003
Категория: Удобство использования
Описание: Новый пользователь должен освоить основные функции за 30 минут
Критерии: 90% пользователей успешно выполняют основные задачи без помощи
Приоритет: Средний
```

#### Надежность (Reliability):
- **Доступность**: Время работы системы
- **Отказоустойчивость**: Способность работать при сбоях
- **Восстанавливаемость**: Скорость восстановления после сбоев
- **Точность**: Правильность результатов

#### Примеры требований надежности:
```
ID: NFR-004
Категория: Надежность
Описание: Система должна быть доступна 99.9% времени
Критерии: Не более 8.76 часов простоя в год
Приоритет: Высокий
```

#### Совместимость (Compatibility):
- **Платформы**: Поддерживаемые операционные системы
- **Браузеры**: Поддерживаемые веб-браузеры
- **Устройства**: Поддерживаемые типы устройств
- **Интеграция**: Совместимость с другими системами

#### Примеры требований совместимости:
```
ID: NFR-005
Категория: Совместимость
Описание: Система должна работать в браузерах Chrome, Firefox, Safari
Критерии: Все функции работают корректно в версиях браузеров не старше 2 лет
Приоритет: Средний
```


РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: Analyst; ТЕМА: Требования к данным и интерфейсам

## Требования к данным и интерфейсам

### Требования к данным

#### Структура данных:
- **Сущности**: Основные объекты системы
- **Атрибуты**: Свойства сущностей
- **Связи**: Отношения между сущностями
- **Ограничения**: Правила для данных

#### Пример описания данных:
```
Сущность: Пользователь
Атрибуты:
- ID (уникальный идентификатор)
- Email (электронная почта)
- Имя (имя пользователя)
- Дата регистрации
- Статус (активный/неактивный)
Связи:
- Пользователь -> Заказы (один ко многим)
- Пользователь -> Профиль (один к одному)
Ограничения:
- Email должен быть уникальным
- Email должен соответствовать формату
- Имя не может быть пустым
```

#### Требования к хранению:
- **Объем данных**: Ожидаемый размер базы данных
- **Скорость доступа**: Время получения данных
- **Резервное копирование**: Частота и метод
- **Архивирование**: Правила хранения старых данных

#### Требования к безопасности данных:
- **Шифрование**: Защита конфиденциальных данных
- **Доступ**: Контроль доступа к данным
- **Аудит**: Логирование операций с данными
- **Соответствие**: Соответствие законодательству (GDPR, 152-ФЗ)

### Требования к интерфейсам

#### Пользовательские интерфейсы (UI):
- **Веб-интерфейс**: Интерфейс для веб-браузеров
- **Мобильный интерфейс**: Интерфейс для мобильных устройств
- **Десктопный интерфейс**: Интерфейс для настольных приложений

#### Примеры требований к UI:
```
ID: UI-001
Тип: Веб-интерфейс
Описание: Главная страница должна содержать навигационное меню
Элементы:
- Логотип компании (левый верхний угол)
- Основное меню (горизонтальное, под логотипом)
- Поиск (правый верхний угол)
- Личный кабинет (правый верхний угол)
Требования:
- Адаптивный дизайн для мобильных устройств
- Поддержка темной и светлой темы
- Доступность для людей с ограниченными возможностями
```

#### Программные интерфейсы (API):
- **REST API**: Веб-сервисы для интеграции
- **SOAP API**: Протокол для обмена данными
- **GraphQL**: Язык запросов для API

#### Примеры требований к API:
```
ID: API-001
Тип: REST API
Описание: API для работы с пользователями
Эндпоинты:
- GET /api/users - получение списка пользователей
- POST /api/users - создание нового пользователя
- PUT /api/users/{id} - обновление пользователя
- DELETE /api/users/{id} - удаление пользователя
Требования:
- Аутентификация через JWT токены
- Ответы в формате JSON
- Коды ответов HTTP
- Документация в формате OpenAPI
```

### Ограничения и предположения

#### Технические ограничения:
- **Технологии**: Используемые технологии и платформы
- **Инфраструктура**: Доступная инфраструктура
- **Бюджет**: Финансовые ограничения
- **Время**: Временные ограничения

#### Примеры ограничений:
```
ID: CON-001
Тип: Техническое ограничение
Описание: Система должна работать на существующем сервере
Детали: Сервер с 8 ГБ RAM, 4 ядра CPU, Linux Ubuntu 20.04
Влияние: Ограничивает производительность системы
```

#### Бизнес-ограничения:
- **Регулятивные**: Требования законодательства
- **Организационные**: Политики организации
- **Рыночные**: Ограничения рынка
- **Конкурентные**: Действия конкурентов

#### Предположения:
- **Технические**: Предположения о технологиях
- **Бизнес**: Предположения о бизнес-среде
- **Пользователи**: Предположения о пользователях
- **Внешние**: Предположения о внешних факторах

#### Примеры предположений:
```
ID: ASS-001
Тип: Бизнес-предположение
Описание: Количество пользователей не превысит 10,000
Обоснование: Анализ рынка и конкурентов
Риск: При превышении потребуется масштабирование
```


РОЛЬ: Specialist; СПЕЦИАЛЬНОСТЬ: Analyst; ТЕМА: Валидация и тестирование системных требований

## Валидация и тестирование системных требований

### Валидация системных требований

#### Процесс валидации:
1. **Проверка полноты**: Все ли требования выявлены
2. **Проверка корректности**: Правильность формулировок
3. **Проверка непротиворечивости**: Отсутствие конфликтов
4. **Проверка реализуемости**: Возможность реализации
5. **Проверка тестируемости**: Возможность тестирования
6. **Проверка трассируемости**: Связь с бизнес-требованиями

#### Методы валидации:
- **Ревью требований**: Проверка экспертами
- **Прототипирование**: Создание прототипов
- **Моделирование**: Создание моделей системы
- **Анализ влияния**: Оценка последствий изменений
- **Проверка сценариев**: Тестирование на реальных сценариях

#### Участники валидации:
- **Бизнес-аналитики**: Проверка соответствия бизнес-целям
- **Технические специалисты**: Оценка реализуемости
- **Пользователи**: Подтверждение потребностей
- **Тестировщики**: Оценка тестируемости
- **Архитекторы**: Проверка архитектурной совместимости

### Требования к тестированию

#### Критерии приемки:
- **Конкретные**: Четкие условия выполнения
- **Измеримые**: Возможность количественной оценки
- **Достижимые**: Реалистичность выполнения
- **Релевантные**: Соответствие бизнес-целям
- **Временные**: Ограничения по времени

#### Пример критериев приемки:
```
ID: AC-001
Требование: FR-001 (Регистрация пользователя)
Критерии приемки:
1. Пользователь может ввести валидный email и пароль
2. Система отправляет подтверждение на указанный email
3. Пользователь может подтвердить email по ссылке
4. После подтверждения аккаунт становится активным
5. При вводе невалидного email система показывает ошибку
6. При вводе слабого пароля система предлагает улучшить
```

#### Типы тестирования:
- **Функциональное тестирование**: Проверка функций системы
- **Нефункциональное тестирование**: Проверка характеристик качества
- **Интеграционное тестирование**: Проверка взаимодействия компонентов
- **Системное тестирование**: Проверка системы в целом
- **Приемочное тестирование**: Проверка соответствия требованиям

### Стандарты документирования

#### Форматы документирования:
- **IEEE 830**: Стандарт для спецификации требований
- **ISO/IEC 25010**: Качество программного обеспечения
- **BABOK**: Руководство по бизнес-анализу
- **Volere**: Методология сбора требований

#### Структура документа требований:
1. **Введение**: Цель и область документа
2. **Общее описание**: Контекст и обзор системы
3. **Специфические требования**: Детальные требования
4. **Дополнения**: Дополнительная информация

#### Инструменты документирования:
- **Microsoft Word**: Текстовые документы
- **Confluence**: Совместная работа
- **Jira**: Управление требованиями
- **Enterprise Architect**: Моделирование
- **Lucidchart**: Диаграммы

### Трассируемость требований

#### Матрица трассируемости:
- **Бизнес-требования → Системные требования**: Связь целей с функциями
- **Системные требования → Дизайн**: Связь требований с архитектурой
- **Дизайн → Код**: Связь архитектуры с реализацией
- **Код → Тесты**: Связь реализации с тестами

#### Пример матрицы трассируемости:
```
Бизнес-требование | Системное требование | Дизайн | Код | Тест
BR-001            | FR-001, FR-002       | UC-01  | C1  | T1
BR-002            | FR-003, NFR-001      | UC-02  | C2  | T2
```

#### Преимущества трассируемости:
- **Контроль изменений**: Отслеживание влияния изменений
- **Покрытие требований**: Проверка реализации всех требований
- **Анализ влияния**: Оценка последствий изменений
- **Управление рисками**: Выявление рисков на ранних этапах

### Метрики качества требований

#### Показатели качества:
- **Полнота**: Процент выявленных требований
- **Точность**: Процент корректных требований
- **Стабильность**: Процент изменений требований
- **Покрытие тестами**: Процент требований с тестами
- **Трассируемость**: Процент связанных требований

#### Мониторинг и улучшение:
- **Регулярные ревью**: Периодическая проверка требований
- **Сбор обратной связи**: Получение мнений участников
- **Анализ метрик**: Изучение показателей качества
- **Корректирующие действия**: Внесение улучшений
- **Обучение команды**: Повышение квалификации

### Лучшие практики

#### Принципы написания:
- **Четкость**: Понятные и однозначные формулировки
- **Конкретность**: Избегание общих фраз
- **Измеримость**: Возможность проверки выполнения
- **Реалистичность**: Достижимость требований
- **Согласованность**: Отсутствие противоречий

#### Частые ошибки:
- **Слишком общие**: Отсутствие конкретики
- **Неизмеримые**: Невозможность проверки
- **Неполные**: Пропуск важных аспектов
- **Противоречивые**: Конфликты между требованиями
- **Нереалистичные**: Невозможность реализации

#### Рекомендации:
- **Регулярная проверка**: Постоянная валидация требований
- **Вовлечение стейкхолдеров**: Активное участие заинтересованных сторон
- **Документирование решений**: Запись причин принятых решений
- **Версионирование**: Контроль версий документов
- **Обучение команды**: Повышение квалификации участников 