# SDLC (Software Development Life Cycle) для бизнес-системного аналитика

## Метаданные документа
- **Тип документа**: Методология SDLC
- **Теги**: [SDLC, жизненный_цикл, роли, процессы, взаимодействие, артефакты, методологии]
- **Версия**: 2.0
- **Дата обновления**: 2024

## Оглавление
1. [Введение в SDLC](#введение-в-sdlc)
2. [Роли и ответственности в SDLC](#роли-и-ответственности-в-sdlc)
3. [Этапы SDLC и участие аналитика](#этапы-sdlc-и-участие-аналитика)
4. [Артефакты аналитика в SDLC](#артефакты-аналитика-в-sdlc)
5. [Методологии разработки](#методологии-разработки)
6. [Практические кейсы](#практические-кейсы)

---

## Введение в SDLC

### Определение
SDLC (Software Development Life Cycle) — это структурированный процесс создания программного обеспечения, который включает планирование, создание, тестирование и развертывание информационной системы.

### Важность для аналитика
- **Понимание контекста**: Знание, где находится проект и что ожидается
- **Эффективное взаимодействие**: Понимание потребностей других ролей
- **Качество артефактов**: Создание документов в нужное время
- **Управление ожиданиями**: Реалистичные сроки и результаты

### Измеримые показатели успеха
- **Своевременность**: 95% артефактов готовы вовремя
- **Качество**: <10% возвратов на доработку
- **Коммуникация**: 90% вопросов решены без эскалации
- **Удовлетворенность**: NPS команды >8/10

---

## Роли и ответственности в SDLC

### 1. Product Owner (PO)
**Ответственность**: Максимизация ценности продукта

**Взаимодействие с аналитиком**:
- **Input**: Бизнес-видение, приоритеты, ограничения
- **Output**: User Stories, критерии приемки, roadmap
- **Частота**: Ежедневно в Agile, еженедельно в Waterfall

**Пример взаимодействия**:
```
PO: "Нужна функция поиска товаров для увеличения конверсии"
Аналитик: "Давайте определим:
- Какие параметры поиска критичны?
- Какое время отклика приемлемо?
- Какие фильтры нужны пользователям?"
Результат: 15 User Stories с критериями приемки
```

### 2. Бизнес-аналитик (BA)
**Ответственность**: Выявление и формализация бизнес-требований

**Ключевые навыки**:
- Техники выявления требований (интервью, воркшопы)
- Моделирование бизнес-процессов (BPMN)
- Написание BRD (Business Requirements Document)
- Управление изменениями требований

**Артефакты BA**:
- Business Requirements Document (BRD)
- Use Cases / User Stories
- Process Maps
- Gap Analysis

### 3. Системный аналитик (SA)
**Ответственность**: Трансляция бизнес-требований в технические

**Ключевые навыки**:
- Проектирование архитектуры решения
- Описание API и интеграций
- Моделирование данных
- Написание технических спецификаций

**Артефакты SA**:
- System Requirements Specification (SRS)
- API Documentation
- Data Models (ERD)
- Integration Specifications

### 4. Архитектор
**Ответственность**: Проектирование технической архитектуры

**Взаимодействие с аналитиком**:
- **Input от аналитика**: Функциональные требования, нагрузка
- **Output для аналитика**: Ограничения архитектуры, паттерны
- **Совместная работа**: Оценка технической реализуемости

**Пример коллаборации**:
```
Аналитик: "Требуется real-time синхронизация данных"
Архитектор: "Рассмотрим варианты:
- WebSockets для <1000 подключений
- Message Queue для масштабирования
- Polling как fallback"
Решение: Гибридный подход с автопереключением
```

### 5. Разработчик
**Ответственность**: Реализация функциональности

**Ожидания от аналитика**:
- Четкие acceptance criteria
- Примеры данных и edge cases
- Mockups/wireframes
- Приоритизация задач

**Частые вопросы разработчиков**:
1. "Что должно происходить при ошибке?"
2. "Какие граничные значения?"
3. "Как это должно выглядеть на мобильном?"
4. "Какая производительность ожидается?"

### 6. QA Engineer
**Ответственность**: Обеспечение качества продукта

**Взаимодействие с аналитиком**:
- **Совместная работа**: Создание тест-кейсов на этапе анализа
- **Clarifications**: Уточнение неочевидных сценариев
- **Feedback loop**: Информация о найденных проблемах

**Метрики качества требований**:
- Тестируемость: 100% требований имеют критерии проверки
- Полнота: <5% багов из-за неучтенных сценариев
- Ясность: <10% вопросов при создании тестов

### 7. DevOps Engineer
**Ответственность**: Автоматизация развертывания и мониторинг

**Потребности от аналитика**:
- Требования к окружениям
- Параметры мониторинга и алертов
- SLA и критичность сервисов
- Требования к backup и DR

---

## Этапы SDLC и участие аналитика

### 1. Инициация (Initiation)
**Длительность**: 1-2 недели

**Активности аналитика**:
- Первичный сбор требований
- Анализ стейкхолдеров
- Оценка осуществимости
- Создание Vision документа

**Практический пример**:
```
Проект: Мобильное приложение для заказа еды
Аналитик провел:
- 5 интервью с потенциальными пользователями
- Анализ 3 конкурентов
- Воркшоп с бизнесом (выявлено 50+ features)
- Приоритизация по MoSCoW
Результат: Vision на 10 страниц + MVP scope
```

**Измеримые результаты этапа**:
- [ ] Определены все стейкхолдеры
- [ ] Собраны high-level требования
- [ ] Создан Vision документ
- [ ] Получено одобрение на продолжение

### 2. Планирование (Planning)
**Длительность**: 2-4 недели

**Активности аналитика**:
- Детализация требований
- Создание WBS (Work Breakdown Structure)  
- Оценка трудозатрат с командой
- Планирование релизов

**Инструменты планирования**:
1. **User Story Mapping** - визуализация функциональности
2. **Planning Poker** - командная оценка
3. **Gantt Charts** - временная шкала
4. **Risk Matrix** - оценка рисков

**Практическое задание**:
Создайте User Story Map для интернет-магазина:
1. Определите персоны (3-5)
2. Опишите User Journey для каждой
3. Разбейте на эпики и stories
4. Приоритизируйте для MVP

### 3. Анализ (Analysis)
**Длительность**: 3-6 недель (или continuous в Agile)

**Детальные активности**:
```
Неделя 1-2: Бизнес-анализ
- Моделирование AS-IS процессов
- Выявление pain points
- Проектирование TO-BE процессов

Неделя 3-4: Функциональный анализ  
- Написание User Stories
- Создание mockups/wireframes
- Определение business rules

Неделя 5-6: Системный анализ
- Проектирование интеграций
- Описание API контрактов
- Моделирование данных
```

**Чек-лист качества анализа**:
- [ ] Все требования прослеживаемы до бизнес-целей
- [ ] Каждое требование имеет acceptance criteria
- [ ] Созданы mockups для всех экранов
- [ ] Определены все интеграции
- [ ] Проведен анализ рисков

### 4. Дизайн (Design)
**Длительность**: 2-4 недели

**Роль аналитика**:
- Поддержка UX/UI дизайнера требованиями
- Валидация дизайна на соответствие требованиям
- Создание detailed specifications
- Участие в design review

**Артефакты этапа**:
1. **Functional Specification** - что система делает
2. **Technical Specification** - как система работает
3. **UI/UX Guidelines** - как система выглядит
4. **API Documentation** - как системы общаются

### 5. Разработка (Development)
**Длительность**: 2-6 месяцев

**Ежедневные активности аналитика**:
- **Standup** (15 мин): Статус, блокеры, планы
- **Clarifications** (1-2 часа): Ответы на вопросы
- **Refinement** (2-4 часа/неделя): Подготовка backlog
- **Review** (1-2 часа): Проверка реализации

**Метрики участия**:
- Время ответа на вопрос: <2 часов
- Количество блокеров из-за требований: <5%
- Rework из-за неясностей: <10%

### 6. Тестирование (Testing)
**Длительность**: 20-30% от разработки

**Вклад аналитика**:
- Участие в тест-дизайне
- Валидация тест-кейсов
- Помощь в анализе дефектов
- Acceptance testing

**Пример участия в тестировании**:
```
Дефект: "Невозможно оформить заказ с промокодом"
Анализ аналитика:
1. Проверка требований - промокоды описаны
2. Выявление gap - не учтен кейс истекших промокодов
3. Решение - добавить валидацию и сообщение
4. Обновление документации
```

### 7. Развертывание (Deployment)
**Длительность**: 1-2 недели

**Задачи аналитика**:
- Подготовка deployment guide
- Обучение пользователей
- Создание user manuals
- Поддержка во время go-live

**Чек-лист готовности**:
- [ ] Все критичные дефекты исправлены
- [ ] Документация обновлена
- [ ] Пользователи обучены
- [ ] Support team готова
- [ ] Rollback план подготовлен

### 8. Поддержка (Maintenance)
**Длительность**: Continuous

**Ongoing активности**:
- Анализ обратной связи
- Приоритизация улучшений
- Работа с инцидентами
- Оптимизация процессов

---

## Артефакты аналитика в SDLC

### Матрица артефактов по этапам

| Этап | Артефакт | Назначение | Потребители |
|------|----------|------------|-------------|
| Инициация | Vision Document | Общее видение продукта | Все роли |
| Инициация | Stakeholder Map | Карта заинтересованных лиц | PM, BA |
| Планирование | Product Backlog | Приоритизированные требования | Вся команда |
| Планирование | Roadmap | План релизов | Бизнес, команда |
| Анализ | BRD | Бизнес-требования | PO, BA, SA |
| Анализ | User Stories | Функциональные требования | Dev, QA |
| Анализ | Process Flows | Бизнес-процессы | Все роли |
| Дизайн | SRS | Системные требования | Dev, Arch |
| Дизайн | Wireframes | Визуальные макеты | UI/UX, Dev |
| Дизайн | API Specs | Контракты интеграций | Dev, QA |
| Разработка | Clarifications | Уточнения требований | Dev, QA |
| Тестирование | Test Scenarios | Сценарии проверки | QA |
| Развертывание | User Guide | Руководство пользователя | End users |
| Поддержка | Change Requests | Запросы на изменения | Вся команда |

### Шаблон User Story

```markdown
**ID**: US-001
**Title**: Поиск товаров по категории
**As a** покупатель
**I want to** искать товары по категориям
**So that** я могу быстро найти нужный товар

**Acceptance Criteria**:
1. GIVEN я на главной странице
   WHEN я выбираю категорию
   THEN вижу товары только этой категории

2. GIVEN я в категории
   WHEN товаров больше 20
   THEN вижу пагинацию

3. GIVEN я в категории  
   WHEN нет товаров
   THEN вижу сообщение "Товары не найдены"

**Priority**: High
**Estimation**: 5 SP
**Dependencies**: US-002 (Каталог товаров)
```

### Шаблон BRD (фрагмент)

```markdown
# Business Requirements Document
## 1. Executive Summary
Цель проекта - создание маркетплейса для...

## 2. Business Objectives
- Увеличить выручку на 30% за год
- Привлечь 10,000 новых продавцов
- Достичь NPS > 50

## 3. Stakeholders
| Роль | Имя | Интерес | Влияние |
|------|-----|---------|---------|
| Sponsor | Иван Петров | Высокий | Высокое |
| End User | B2C покупатели | Высокий | Среднее |

## 4. Functional Requirements
### 4.1 Поиск и навигация
- FR001: Полнотекстовый поиск
- FR002: Фильтры по характеристикам
- FR003: Сортировка результатов

## 5. Non-Functional Requirements  
### 5.1 Performance
- NFR001: Время загрузки страницы < 3 сек
- NFR002: Поддержка 10,000 concurrent users
```

---

## Методологии разработки

### Waterfall
**Характеристики**:
- Последовательные этапы
- Детальное планирование upfront
- Изменения дорогие
- Документация важна

**Роль аналитика в Waterfall**:
- **Фаза анализа**: 2-3 месяца детального анализа
- **Объем документации**: 100+ страниц спецификаций
- **Изменения**: Через формальный change control
- **Коммуникация**: Преимущественно через документы

**Когда подходит**:
- Требования стабильны и понятны
- Критичны регуляторные требования
- Фиксированный бюджет и сроки
- Большая распределенная команда

### Agile/Scrum
**Характеристики**:
- Итеративная разработка
- Частые поставки
- Адаптивность к изменениям
- Коллаборация важнее документации

**Роль аналитика в Scrum**:
- **Sprint Planning**: Подготовка и оценка stories
- **Daily Scrum**: Решение блокеров
- **Sprint Review**: Демо и сбор feedback
- **Retrospective**: Улучшение процессов

**Типичный спринт аналитика**:
```
Неделя 1:
- Пн: Sprint Planning (4ч)
- Вт-Чт: Анализ stories след. спринта
- Пт: Refinement session (2ч)

Неделя 2:
- Пн-Ср: Поддержка разработки
- Чт: Sprint Review (2ч)
- Пт: Retrospective (1ч) + Planning
```

### Kanban
**Характеристики**:
- Непрерывный поток
- WIP limits
- Визуализация работы
- Pull система

**Роль аналитика в Kanban**:
- Управление потоком требований
- Приоритизация по бизнес-value
- Устранение bottlenecks
- Оптимизация lead time

**Метрики Kanban для аналитика**:
- Lead time требования: от идеи до production
- Cycle time анализа: время на анализ
- WIP для анализа: не более 3 items
- Throughput: stories в неделю

### Гибридные подходы
**Примеры комбинаций**:
1. **Water-Scrum-Fall**: Waterfall для анализа, Scrum для разработки
2. **Scrumban**: Scrum события + Kanban board
3. **SAFe**: Масштабированный Agile для больших организаций

---

## Практические кейсы

### Кейс 1: Переход с Waterfall на Agile

**Исходная ситуация**:
- Компания: Банк, 500+ человек в IT
- Проблема: Проекты задерживаются на 50%
- Текущий процесс: Классический Waterfall

**Роль аналитика в трансформации**:
1. **Пилот** (месяц 1-3):
   - Выбрали небольшой проект
   - Обучили команду Scrum
   - Сократили документацию на 70%
   - Результат: Поставка за 3 месяца вместо 6

2. **Масштабирование** (месяц 4-9):
   - Расширили на 5 команд
   - Создали Community of Practice
   - Адаптировали процессы под регулятора

3. **Результаты через год**:
   - Time to market сократился на 40%
   - Удовлетворенность команд выросла на 60%
   - Количество дефектов снизилось на 30%

### Кейс 2: Работа с распределенной командой

**Контекст**:
- Frontend: Москва
- Backend: Санкт-Петербург  
- QA: Минск
- PO: Лондон

**Вызовы и решения**:
1. **Часовые пояса**:
   - Core hours: 11:00-15:00 MSK
   - Записи всех встреч
   - Асинхронная коммуникация

2. **Коммуникация**:
   - Единый Confluence space
   - Детальные acceptance criteria
   - Video demos вместо текста

3. **Культурные различия**:
   - Общий onboarding
   - Регулярные team buildings
   - Rotation между офисами

### Кейс 3: Аналитик в стартапе vs корпорации

**Стартап (10 человек)**:
- Роли: BA + SA + частично PM
- Документация: Минимальная, в Notion
- Процесс: Kanban, деплой ежедневно
- Фокус: Скорость и эксперименты

**Корпорация (5000 человек)**:
- Роли: Узкая специализация
- Документация: Детальная, compliance
- Процесс: SAFe, релизы квартальные
- Фокус: Стабильность и масштаб

### Практическое задание: Выбор методологии

**Сценарий**: Вы аналитик, нужно выбрать методологию для проекта

**Проект А**: Государственная система учета
- Бюджет фиксирован
- Требования от регулятора
- Срок 2 года
- Ваш выбор? Почему?

**Проект Б**: Мобильное приложение для стартапа
- MVP за 3 месяца
- Требования меняются
- Команда 5 человек
- Ваш выбор? Почему?

**Проект В**: Модернизация ERP системы
- 50+ интеграций
- 1000+ пользователей
- Критична стабильность
- Ваш выбор? Почему?

---

## Чек-лист аналитика для успешного SDLC

### Daily
- [ ] Проверить блокеры команды
- [ ] Ответить на вопросы в чате
- [ ] Обновить статусы задач
- [ ] Подготовить stories на завтра

### Weekly  
- [ ] Refinement session проведен
- [ ] Backlog на 2 спринта готов
- [ ] Метрики процесса собраны
- [ ] 1-1 со стейкхолдерами

### Sprint/Iteration
- [ ] Все stories имеют AC
- [ ] Проведено demo
- [ ] Собран feedback
- [ ] Ретроспектива проведена

### Release
- [ ] Документация обновлена
- [ ] Пользователи обучены
- [ ] Support подготовлен
- [ ] Lessons learned зафиксированы

## Метрики успеха аналитика в SDLC

### Количественные метрики
- **Requirements stability**: <15% изменений после sign-off
- **Defect leakage**: <5% багов из-за требований
- **Velocity contribution**: Постоянный или растущий
- **Stakeholder satisfaction**: >4/5

### Качественные показатели
- Команда понимает что и зачем делает
- Минимум переработок и rework
- Проактивное решение проблем
- Позитивная обратная связь

### Карьерный рост через SDLC
1. **Junior**: Освоение одной методологии
2. **Middle**: Работа в 2-3 методологиях
3. **Senior**: Адаптация процессов под проект
4. **Lead**: Трансформация процессов организации

> "Понимание SDLC - это не знание этапов, а умение создавать ценность на каждом из них" - Опыт успешных аналитиков 