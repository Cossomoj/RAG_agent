import asyncio
import websockets

async def test_888_detailed():
    uri = "ws://localhost:8000/ws"
    
    print("=== –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ú–ü–¢–ê 888 ===")
    print("–í–æ–ø—Ä–æ—Å: –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–∞–≤—ã–∫–∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞")
    print("–†–æ–ª—å: –õ–∏–¥")
    print("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π")
    print()
    
    try:
        async with websockets.connect(uri) as websocket:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await websocket.send("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–∞–≤—ã–∫–∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞")
            await websocket.send("–õ–∏–¥")
            await websocket.send("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π")
            await websocket.send("888")
            await websocket.send('[{"role": "user", "content": "–ú—ã –≥–æ–≤–æ—Ä–∏–ª–∏ –ø—Ä–æ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã"}]')
            await websocket.send("1")
            
            print("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç
            response_chunks = []
            chunk_count = 0
            
            try:
                while True:
                    response = await asyncio.wait_for(websocket.recv(), timeout=20.0)
                    chunk_count += 1
                    response_chunks.append(response)
                    print(f"Chunk {chunk_count}: {response[:80]}...")
                    
                    if chunk_count > 30:
                        break
                        
            except (asyncio.TimeoutError, websockets.exceptions.ConnectionClosed):
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            if response_chunks:
                full_response = "".join(response_chunks)
                print(f"\nüìÑ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ ({len(full_response)} —Å–∏–º–≤–æ–ª–æ–≤):")
                print("=" * 60)
                print(full_response)
                print("=" * 60)
                
                # –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã RAG
                rag_indicators = [
                    "–º–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", "junior", "middle", "senior", "lead",
                    "—Å–æ—Ñ—Ç-—Å–∫–∏–ª–ª—ã", "—Ö–∞—Ä–¥-—Å–∫–∏–ª–ª—ã", "–≥—Ä–µ–π–¥", "–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è", "–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π",
                    "–Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", "–æ–Ω–±–æ—Ä–¥–∏–Ω–≥", "1-2-1", "–∏–ø—Ä", "–º–µ–Ω—Ç–æ—Ä–∏–Ω–≥",
                    "backlog", "roadmap", "—Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä", "po", "pm",
                    "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å", "–º–æ–Ω–æ–ª–∏—Ç", "python", "django"
                ]
                
                found_indicators = []
                for indicator in rag_indicators:
                    if indicator.lower() in full_response.lower():
                        found_indicators.append(indicator)
                
                print(f"\nüîç –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ê–ù–ò–Ø:")
                print(f"–ù–∞–π–¥–µ–Ω—ã RAG –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {found_indicators}")
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(found_indicators)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
                corporate_terms = [
                    "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω", "–¥–æ–∫—É–º–µ–Ω—Ç", "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "–ø–æ–ª–∏—Ç–∏–∫", "–ø—Ä–æ—Ü–µ–¥—É—Ä",
                    "—Å—Ç–∞–Ω–¥–∞—Ä—Ç", "—Ä–µ–≥–ª–∞–º–µ–Ω—Ç", "–º–µ—Ç–æ–¥–æ–ª–æ–≥", "—Ñ—Ä–µ–π–º–≤–æ—Ä–∫"
                ]
                
                found_corporate = []
                for term in corporate_terms:
                    if term.lower() in full_response.lower():
                        found_corporate.append(term)
                
                print(f"–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {found_corporate}")
                
                # –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAG
                if len(found_indicators) > 0 or len(found_corporate) > 0:
                    print("‚úÖ –í–ï–†–û–Ø–¢–ù–û –ò–°–ü–û–õ–¨–ó–£–ï–¢ RAG")
                else:
                    print("‚ùå –í–ï–†–û–Ø–¢–ù–û –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢ RAG")
                    
            else:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω!")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_888_detailed()) 