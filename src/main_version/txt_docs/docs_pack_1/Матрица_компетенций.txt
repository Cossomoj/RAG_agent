Уровень Junior 
Софты: 1. Желание учиться которое подтверждается делом.(Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком.(Инициатива по вопросам/запросу ОС должна поступать от специалиста). 3. Умение принимать ОС. 4. Многозадачность - в термин (многозадачность) вкладывается НЕ возможность в каждый момент времени думать сразу о нескольких задачах, а возможность переключаться между задачами/проектами (от 2х - оптимально, до 5ти - максимально) без сильной потери эффективности (что какая-то потеря эффективности будет - факт). 
Харды: 1. Знание json нотации. 2. Знание Postman и Curl (любого инструмента отправки http запросов). 3. Умение использовать User Story и Use Case. 4. Понимание клиент-серверного взаимодействия. 5. Владение любым инструментом разметки макетов (пэинт/фотошоп/автокад/...). 
Уровень Junior+ Middle- 
Софты: 1. Желание учиться которое подтверждается делом (Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком (Инициатива по вопросам/запросу ОС должна поступать от специалиста). 3. Умение принимать ОС. 4. Многозадачность (определение см. выше) 
Харды: 1. Знание json нотации. 2. Знание Postman и Curl. (любого инструмента отправки http запросов). 3. Умение использовать User Story и Use Case. 4. Понимание клиент-серверного взаимодействия. 5. Владение любым инструментом разметки макетов (пэинт/фотошоп/автокад/...). 6. Построение сиквенс диаграмм в UML нотации. 7. Умение работать со сваггером/openAPI cхемами. 
Уровень Middle+ 
Софты: 1. Желание учиться которое подтверждается делом.(Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком.(Инициатива по вопросам/запросу ОС должна поступать от специалиста). 3. Умение принимать ОС. 4. Умениедоносить своимысли до коллег. 5. Умение объяснить заказчику возможные варианты реализации. 6. Многозадачность 7. Умение выявить у себя недостаток знаний в определенном домене и закрыть его при необходимости 
Харды: 1. Знание json и xml нотации. 2. Знание Postman и Curl. Любого инструмента отправки http запросов. 3. Умение использовать User Story и Use Case. 4. Понимание клиент-серверного взаимодействия. 5. Владение любым инструментом разметки макетов (пэинт/фотошоп/автокад/...). 6. Построение сиквенс диаграмм в UML нотации. 7. Умение работать со сваггером/openAPI cхемами. 8. Понимание синхронного и асинхронног взаимодействия на уровне, не просто знания протоколов, а для чего они реально нужны, когда применять одно, когда другое. 9. Опыт работы с очередями (Rabbit, Kafka). 10. Понимание плюсов и минусов микросервисов и монолита. 11. Понимание стейтлесс и стэйтфул сервисов. 12. Понимание подхода API first. 13. Опыт работы с Charles. (перехват и анализ клиент-серверных запросов). 14. Опыт работы с реляционными и нереляционными базами, понимание разницы между ними, умение писать простые запросы. 15. Умение программировать (скрипты, REST api методы) на скриптовом языке (python, js). 16. Понимание принципов работы LLM. 
Уровень Senior 
Софты: 1. Желание учиться которое подтверждается делом.(Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком.(Инициатива по вопросам/запросу ОС должна поступать от специалиста). 3. Умение принимать ОС. 4. Умениедоносить своимысли до коллег. 5. Умение объяснить заказчику возможные варианты реализации. 6. Многозадачность 7. Умение выявить у себя недостаток знаний в определенном домене и закрыть его при необходимости. 8. Понимание как работа влияет на проект в целом: что нужно сделать в первом приоритете, что можно поставить на паузу, чего можно не делать вообще. 9. Умение сглаживать напряжение внутри команды, умение объяснить команде, что могут быть задачи интересные, но не полезные для проекта 
Харды: 1. Знание json и xml нотации. 2. Знание Postman и Curl. Любого инструмента отправки http запросов. 3. Умение использовать User Story и Use Case. 4. Понимание клиент-серверного взаимодействия. 5. Владение любым инструментом разметки макетов (пэинт/фотошоп/автокад/...). 6. Построение сиквенс диаграмм в UML нотации. 7. Умение работать со сваггером/openAPI cхемами. 8. Понимание синхронного и асинхронног взаимодействия на уровне, не просто знания протоколов, а для чего они реально нужны, когда применять одно, когда другое. 9. Опыт работы с очередями (Rabbit, Kafka). 10. Понимание плюсов и минусов микросервисов и монолита. 11. Понимание стейтлесс и стэйтфул сервисов. 12. Понимание подхода API first. 13. Опыт работы с Charles. (перехват и анализ клиент-серверных запросов). 14. Опыт работы с реляционными и нереляционными базами, понимание разницы между ними, умение писать простые запросы. 15. Умение программировать (скрипты, REST api методы) на скриптовом языке (python, js). 16. Понимание принципов работы LLM. 17. Умение построить (возможно с командой) и понимать архитектуру проекта, понимать, что можно легко доработать, а что потребует серьезного изменения скоупа проекта. 18. Понимание взаимодействия микросервисов между собой (ресты, очереди, service mesh). 19. Понимание работы docker и kubernetes 
Уровень Lead 
Софты: 1. Желание учиться которое подтверждается делом.(Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком.(Инициатива по вопросам/запросу ОС должна поступать от специалиста). 3. Умение принимать ОС. 4. Умениедоносить своимысли до коллег. 5. Умение объяснить заказчику возможные варианты реализации. 6. Многозадачность 7. Умение выявить у себя недостаток знаний в определенном домене и закрыть его при необходимости. 8. Понимание как работа влияет на проект в целом: что нужно сделать в первом приоритете, что можно поставить на паузу, чего можно не делать вообще. 9. Умение сглаживать напряжение внутри команды, умение объяснить команде, что могут быть задачи интересные, но не полезные для проекта 10. Наставничество над коллегами из своей компетенции с понятным результатом - приобретением ими желаемых скиллов. 11. Умение давать (ученикам) нетравматичную ОС. 12. Умение проведения встреч one-2-one. 
Харды: Харды Senior и Lead не отличаются
