Уровень Junior Софты: 1. Желание учиться которое подтверждается делом.(Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком. 3. Умение принимать ОС. 4. Многозадачность.Харды: 1. Знание синтаксиса Python (типы данных, операторы, условные конструкции, циклы). 2. Понимание принципов ООП (инкапсуляция, наследование, полиморфизм). 3. Работа с файлами и базами данных (SQLite, JSON). 4. Умение работать с библиотеками requests, json, os, logging. 5. Понимание основ HTTP (методы GET, POST, PUT, DELETE). 6. Опыт написания простых тестов с использованием unittest или pytest. 7. Умение развернуть и запустить Python-приложение (виртуальное окружение, зависимости).Уровень Junior+ Middle- Софты: 1. Желание учиться которое подтверждается делом (Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком. 3. Умение принимать ОС. 4. Многозадачность.Харды: 1. Знание синтаксиса Python на уровне написания сложных функций и классов. 2. Уверенное знание ООП. 3. Опыт работы с REST API. 4. Опыт работы с реляционными базами данных (PostgreSQL, MySQL) и ORM (SQLAlchemy). 5. Опыт работы с асинхронностью (модуль asyncio). 6. Умение работать с Docker (создание и запуск контейнеров). 7. Опыт работы с логированием и обработкой ошибок. 8. Умение настраивать и работать с CI/CD (GitHub Actions, GitLab CI).Уровень Middle+ Софты: 1. Желание учиться которое подтверждается делом.(Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком. 3. Умение принимать ОС. 4. Умение доносить свои мысли до коллег. 5. Умение объяснить заказчику возможные варианты реализации. 6. Многозадачность 7. Умение выявить у себя недостаток знаний в определенном домене и закрыть его при необходимости.Харды: 1. Углубленное понимание ООП и структур данных. 2. Опыт написания асинхронного кода (async/await). 3. Опыт работы с очередями (RabbitMQ, Kafka). 4. Понимание плюсов и минусов микросервисной и монолитной архитектуры. 5. Опыт работы с Docker Compose и Kubernetes. 6. Опыт работы с внешними API (OAuth, WebSockets). 7. Умение проектировать и документировать API с использованием OpenAPI/Swagger. 8. Опыт работы с кэшированием (Redis). 9. Опыт написания интеграционных и нагрузочных тестов. 10. Понимание принципов работы LLM. 11. Опыт работы с библиотеками для парсинга данных (BeautifulSoup, lxml). 12. Умение работать с многопоточностью и многопроцессорностью (модули threading, multiprocessing). 13. Опыт работы с облачными сервисами (AWS, Azure, Cloud.ru).Уровень Senior Софты: 1. Желание учиться которое подтверждается делом.(Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком. 3. Умение принимать ОС. 4. Умение доносить своим мысли до коллег. 5. Умение объяснить заказчику возможные варианты реализации. 6. Многозадачность 7. Умение выявить у себя недостаток знаний в определенном домене и закрыть его при необходимости. 8. Понимание как работа влияет на проект в целом: что нужно сделать в первом приоритете, что можно поставить на паузу, чего можно не делать вообще. 9. Умение сглаживать напряжение внутри команды, умение объяснить команде, что могут быть задачи интересные, но не полезные для проекта.Харды: 1. Умение разрабатывать архитектуру Python-приложений. 2. Опыт работы с микросервисами и монолитами. 3. Опыт работы с брокерами сообщений (RabbitMQ, Kafka). 4. Опыт настройки и оптимизации контейнеров в Docker и Kubernetes. 5. Углубленное понимание многопоточности и асинхронности в Python. 6. Опыт работы с высоконагруженными системами. 7. Понимание принципов распределенных систем. 8. Опыт работы с системами логирования и мониторинга (Grafana, Prometheus). 9. Опыт работы с протоколами передачи данных (gRPC, WebSockets). 10. Умение анализировать и устранять узкие места в коде. 11. Понимание работы LLM и интеграции с внешними AI-системами. 12. Опыт работы с CI/CD на уровне настройки пайплайнов. 13. Опыт работы с архитектурой событий (Event-Driven). 14. Умение программировать на нескольких языках (Python + JS/Go/Rust).Уровень LeadСофты: 1. Желание учиться которое подтверждается делом.(Что изучено за последний год? Как это применяется?). 2. Проактивная работа с заказчиком 3. Умение принимать ОС. 4. Умение доносить свои мысли до коллег. 5. Умение объяснить заказчику возможные варианты реализации. 6. Многозадачность 7. Умение выявить у себя недостаток знаний в определенном домене и закрыть его при необходимости. 8. Понимание как работа влияет на проект в целом: что нужно сделать в первом приоритете, что можно поставить на паузу, чего можно не делать вообще. 9. Умение сглаживать напряжение внутри команды, умение объяснить команде, что могут быть задачи интересные, но не полезные для проекта 10. Наставничество над коллегами из своей компетенции с понятным результатом - приобретением ими желаемых скиллов. 11. Умение давать ученикам нетравматичную ОС. 12. Умение проведения встреч one-2-one. Харды: Харды Senior и Lead не отличаются.Многозадачность - в термин вкладывается НЕ возможность в каждый момент времени думать сразу о нескольких задачах, а возможность переключаться между задачами/проектами (от 2х - оптимально, до 5ти - максимально) без сильной потери эффективности.