#!/usr/bin/env python3
import asyncio
import websockets
import json

async def test_websocket():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RAG —Å–µ—Ä–≤–∏—Å—É"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RAG —Å–µ—Ä–≤–∏—Å—É
        websocket_url = "ws://213.171.25.85:8000/ws"
        print(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {websocket_url}...")
        
        async with websockets.connect(websocket_url) as websocket:
            print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"
            question = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"
            role = "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
            specialization = "–ê–Ω–∞–ª–∏—Ç–∏–∫"
            question_id = "3"  # ID –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            context = "[]"
            count = "1"
            
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:")
            print(f"  question: {question}")
            print(f"  role: {role}")
            print(f"  specialization: {specialization}")
            print(f"  question_id: {question_id}")
            print(f"  context: {context}")
            print(f"  count: {count}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ
            await websocket.send(question)
            await websocket.send(role)
            await websocket.send(specialization)
            await websocket.send(question_id)
            await websocket.send(context)
            await websocket.send(count)
            
            print("\nüì° –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            full_answer = ""
            empty_count = 0
            max_empty = 10
            
            while True:
                try:
                    chunk = await asyncio.wait_for(websocket.recv(), timeout=30.0)
                    if chunk:
                        empty_count = 0
                        full_answer += chunk
                        print(f"üì• –ü–æ–ª—É—á–µ–Ω chunk: {chunk[:100]}...")
                    else:
                        empty_count += 1
                        print(f"üì≠ –ü—É—Å—Ç–æ–π chunk #{empty_count}")
                        if empty_count >= max_empty:
                            break
                except asyncio.TimeoutError:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
                    break
                except websockets.exceptions.ConnectionClosed:
                    print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                    break
            
            print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(full_answer)} —Å–∏–º–≤–æ–ª–æ–≤:")
            print(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {full_answer[:500]}...")
            
            if len(full_answer) == 0:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!")
                print("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ RAG —Å–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å ID=3")
            else:
                print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_websocket()) 